#include <gl\gl.h>
#include "buildbox.h"

buildbox::buildbox()
{
    m_active=false;
}

void buildbox::newBuildbox(int type,int carrier)
{
    m_active=true;
    m_HP=100;
    m_moving=true;
    m_inHands=true;
    m_type=type;
    m_carrier=carrier;
    enum parts {pWass=16,pTass=16,pDass=16,pWallBox=10,pMineBox=10,pTurrexpBox=16,pRadarBox=16};
    switch (type)
    {
        case 1:{//Wass
                m_content=pWass;
               }break;
        case 2:{//Tass
                m_content=pWass;
               }break;
        case 3:{//Dass
                m_content=pWass;
               }break;
        case 4:{//WallBox
                m_content=pWallBox;
               }break;
        case 5:{//MineBox
                m_content=pMineBox;
               }break;
        case 6:{//Turr.expBox
                m_content=pTurrexpBox;
               }break;
        case 7:{//Radar Station
                m_content=pRadarBox;
               }break;
        default: m_content=0; break;
    }
}

void buildbox::updatePos(float x,float y,float z,float rot)
{
    m_pos[0]=x;
    m_pos[1]=y;
    m_pos[2]=z;
    m_rot=rot;
}

int buildbox::update(void)
{
    if (m_HP<1) //Death
    {
        m_active=false;
        return 1;
    }
/*
    if (!m_moving)
    {
        //m_pos[1]=height;
        m_pos[0]=(int)m_pos[0];
        m_pos[2]=(int)m_pos[2];
    }*/
    return 0;
}

void buildbox::drawBuildbox(void)
{
    float vex_box[]={
                    //Edges
                     //top left
                    0,0,0,  0,0,0.2,  0,1,0.2,  0,1,0, //Left
                    0,0,0.2,  0.2,0,0.2,  0.2,1,0.2,  0,1,0.2, //Back
                    0.2,0,0,  0.2,1,0,  0.2,1,0.2,  0.2,0,0.2,  //Right
                    0,0,0,  0,1,0,  0.2,1,0,  0.2,0,0, //Front
                    0,1,0,  0,1,0.2,  0.2,1,0.2,  0.2,1,0, //Top
                    0,0,0,  0.2,0,0,  0.2,0,0.2,  0,0,0.2, //Bottom
                     //bottom left
                    0,0,0.8,  0,0,1,  0,1,1,  0,1,0.8, //Left
                    0,0,1,  0.2,0,1,  0.2,1,1,  0,1,1, //Back
                    0.2,0,0.8,  0.2,1,0.8,  0.2,1,1,  0.2,0,1,  //Right
                    0,0,0.8,  0,1,0.8,  0.2,1,0.8,  0.2,0,0.8, //Front
                    0,1,0.8,  0,1,1,  0.2,1,1,  0.2,1,0.8,//Top
                    0,0,0.8,  0.2,0,0.8,  0.2,0,1,  0,0,1, //Bottom
                     //bottom right
                    0.8,0,0.8,  0.8,0,1,  0.8,1,1,  0.8,1,0.8, //Left
                    0.8,0,1,  1,0,1,  1,1,1,  0.8,1,1, //Back
                    1,0,0.8,  1,1,0.8,  1,1,1,  1,0,1,  //Right
                    0.8,0,0.8,  0.8,1,0.8,  1,1,0.8,  1,0,0.8, //Front
                    0.8,1,0.8,  0.8,1,1,  1,1,1,  1,1,0.8,//Top
                    0.8,0,0.8,  1,0,0.8,  1,0,1,  0.8,0,1, //Bottom
                     //top right
                    0.8,0,0,  0.8,0,0.2,  0.8,1,0.2,  0.8,1,0, //Left
                    0.8,0,0.2,  1,0,0.2,  1,1,0.2,  0.8,1,0.2, //Back
                    1,0,0,  1,1,0,  1,1,0.2,  1,0,0.2,  //Right
                    0.8,0,0,  0.8,1,0,  1,1,0,  1,0,0, //Front
                    0.8,1,0,  0.8,1,0.2,  1,1,0.2,  1,1,0,//Top
                    0.8,0,0,  1,0,0,  1,0,0.2,  0.8,0,0.2, //Bottom

                    //bottom
                    0.05,0.01,0.05,  0.95,0.01,0.05,  0.95,0.01,0.95,  0.05,0.01,0.95,

                    //under sides
                     //Left
                    0.05,0.01,0.2,  0.05,0.01,0.8,  0.05,0.5,0.8,  0.05,0.5,0.2, //Left
                    0.15,0.01,0.2,  0.15,0.5,0.2,  0.15,0.5,0.8,  0.15,0.01,0.8, //Right
                    0.05,0.5,0.2,  0.05,0.5,0.8,  0.15,0.5,0.8,  0.15,0.5,0.2, //Top
                     //Right
                    0.85,0.01,0.2,  0.85,0.01,0.8,  0.85,0.5,0.8,  0.85,0.5,0.2, //Left
                    0.95,0.01,0.2,  0.95,0.5,0.2,  0.95,0.5,0.8,  0.95,0.01,0.8, //Right
                    0.85,0.5,0.2,  0.85,0.5,0.8,  0.95,0.5,0.8,  0.95,0.5,0.2, //Top
                     //Top
                    0.8,0.01,0.05,  0.2,0.01,0.05,  0.2,0.5,0.05,  0.8,0.5,0.05, //Front
                    0.8,0.01,0.15,  0.8,0.5,0.15,  0.2,0.5,0.15,  0.2,0.01,0.15, //Back
                    0.8,0.5,0.05,  0.2,0.5,0.05,  0.2,0.5,0.15,  0.8,0.5,0.15, //Top
                     //Down
                    0.8,0.01,0.85,  0.2,0.01,0.85,  0.2,0.5,0.85,  0.8,0.5,0.85, //Front
                    0.8,0.01,0.95,  0.8,0.5,0.95,  0.2,0.5,0.95,  0.2,0.01,0.95, //Back
                    0.8,0.5,0.85,  0.2,0.5,0.85,  0.2,0.5,0.95,  0.8,0.5,0.95, //Top

                    //top sides
                     //Left
                    0.05,0.7,0.2,  0.05,0.7,0.8,  0.05,0.8,0.8,  0.05,0.8,0.2, //Left
                    0.15,0.7,0.2,  0.15,0.8,0.2,  0.15,0.8,0.8,  0.15,0.7,0.8, //Right
                    0.05,0.8,0.2,  0.05,0.8,0.8,  0.15,0.8,0.8,  0.15,0.8,0.2, //Top
                    0.05,0.7,0.2,  0.15,0.7,0.2,  0.15,0.7,0.8,  0.05,0.7,0.8, //Bottom
                     //Right
                    0.85,0.7,0.2,  0.85,0.7,0.8,  0.85,0.8,0.8,  0.85,0.8,0.2, //Left
                    0.95,0.7,0.2,  0.95,0.8,0.2,  0.95,0.8,0.8,  0.95,0.7,0.8, //Right
                    0.85,0.8,0.2,  0.85,0.8,0.8,  0.95,0.8,0.8,  0.95,0.8,0.2, //Top
                    0.85,0.7,0.2,  0.95,0.7,0.2,  0.95,0.7,0.8,  0.85,0.7,0.8, //Bottom
                     //Top
                    0.8,0.7,0.05,  0.2,0.7,0.05,  0.2,0.8,0.05,  0.8,0.8,0.05, //Front
                    0.8,0.7,0.15,  0.8,0.8,0.15,  0.2,0.8,0.15,  0.2,0.7,0.15, //Back
                    0.8,0.8,0.05,  0.2,0.8,0.05,  0.2,0.8,0.15,  0.8,0.8,0.15, //Top
                    0.8,0.7,0.05,  0.8,0.7,0.15,  0.2,0.7,0.15,  0.2,0.7,0.05, //Bottom
                     //Down
                    0.8,0.7,0.85,  0.2,0.7,0.85,  0.2,0.8,0.85,  0.8,0.8,0.85, //Front
                    0.8,0.7,0.95,  0.8,0.8,0.95,  0.2,0.8,0.95,  0.2,0.7,0.95, //Back
                    0.8,0.8,0.85,  0.2,0.8,0.85,  0.2,0.8,0.95,  0.8,0.8,0.95, //Top
                    0.8,0.7,0.85,  0.8,0.7,0.95,  0.2,0.7,0.95,  0.2,0.7,0.85 //Bottom
                   };

    float tex_box[]={
                    //Edges
                     //top left
                    0.002,0.807,  0.057,0.807,  0.057,0.998,  0.002,0.998,//Left
                    0.002,0.807,  0.057,0.807,  0.057,0.998,  0.002,0.998,//Back
                    0.057,0.807,  0.057,0.998,  0.002,0.998,  0.002,0.807,//Right
                    0.057,0.807,  0.057,0.998,  0.002,0.998,  0.002,0.807,//Front
                    0.059,0.941,  0.117,0.941,  0.117,0.998,  0.059,0.998,//Top
                    0.059,0.881,  0.117,0.881,  0.117,0.939,  0.059,0.939,//Bottom
                     //bottom left
                    0.002,0.807,  0.057,0.807,  0.057,0.998,  0.002,0.998,//Left
                    0.002,0.807,  0.057,0.807,  0.057,0.998,  0.002,0.998,//Back
                    0.057,0.807,  0.057,0.998,  0.002,0.998,  0.002,0.807,//Right
                    0.057,0.807,  0.057,0.998,  0.002,0.998,  0.002,0.807,//Front
                    0.059,0.941,  0.117,0.941,  0.117,0.998,  0.059,0.998,//Top
                    0.059,0.881,  0.117,0.881,  0.117,0.939,  0.059,0.939,//Bottom
                     //bottom right
                    0.002,0.807,  0.057,0.807,  0.057,0.998,  0.002,0.998,//Left
                    0.002,0.807,  0.057,0.807,  0.057,0.998,  0.002,0.998,//Back
                    0.057,0.807,  0.057,0.998,  0.002,0.998,  0.002,0.807,//Right
                    0.057,0.807,  0.057,0.998,  0.002,0.998,  0.002,0.807,//Front
                    0.059,0.941,  0.117,0.941,  0.117,0.998,  0.059,0.998,//Top
                    0.059,0.881,  0.117,0.881,  0.117,0.939,  0.059,0.939,//Bottom
                     //top right
                    0.002,0.807,  0.057,0.807,  0.057,0.998,  0.002,0.998,//Left
                    0.002,0.807,  0.057,0.807,  0.057,0.998,  0.002,0.998,//Back
                    0.057,0.807,  0.057,0.998,  0.002,0.998,  0.002,0.807,//Right
                    0.057,0.807,  0.057,0.998,  0.002,0.998,  0.002,0.807,//Front
                    0.059,0.941,  0.117,0.941,  0.117,0.998,  0.059,0.998,//Top
                    0.059,0.881,  0.117,0.881,  0.117,0.939,  0.059,0.939,//Bottom
                    //bottom
                    0.119,0.807,  0.313,0.807,  0.313,0.998,  0.119,0.998,

                    //under sides
                     //Left
                    0.412,0.846,  0.412,1.000,  0.314,1.000,  0.314,0.846,//Left
                    0.412,1.000,  0.314,1.000,  0.314,0.846,  0.412,0.846,//Right
                    0.414,1.000,  0.414,0.846,  0.439,0.846,  0.439,1.000,//Top
                     //Right
                    0.412,0.846,  0.412,1.000,  0.314,1.000,  0.314,0.846,//Left
                    0.412,1.000,  0.314,1.000,  0.314,0.846,  0.412,0.846,//Right
                    0.414,1.000,  0.414,0.846,  0.439,0.846,  0.439,1.000,//Top
                     //Top
                    0.412,0.846,  0.412,1.000,  0.314,1.000,  0.314,0.846,//Front
                    0.412,1.000,  0.314,1.000,  0.314,0.846,  0.412,0.846,//Back
                    0.414,1.000,  0.414,0.846,  0.439,0.846,  0.439,1.000,//Top
                     //Down
                    0.412,0.846,  0.412,1.000,  0.314,1.000,  0.314,0.846,//Front
                    0.412,1.000,  0.314,1.000,  0.314,0.846,  0.412,0.846,//Back
                    0.414,1.000,  0.414,0.846,  0.439,0.846,  0.439,1.000,//Top

                    //top sides 491 519
                     //Left
                    0.441,1.000,  0.441,0.846,  0.490,0.846,  0.490,1.000,//Left
                    0.490,1.000,  0.441,1.000,  0.441,0.846,  0.490,0.846,//Right
                    0.491,1.000,  0.491,0.846,  0.519,0.846,  0.519,1.000,//Top
                    0.519,1.000,  0.491,1.000,  0.491,0.846,  0.519,0.846,//Bottom
                     //Right
                    0.441,1.000,  0.441,0.846,  0.490,0.846,  0.490,1.000,//Left
                    0.490,1.000,  0.441,1.000,  0.441,0.846,  0.490,0.846,//Right
                    0.491,1.000,  0.491,0.846,  0.519,0.846,  0.519,1.000,//Top
                    0.519,1.000,  0.491,1.000,  0.491,0.846,  0.519,0.846,//Bottom
                     //Top
                    0.441,1.000,  0.441,0.846,  0.490,0.846,  0.490,1.000,//Left
                    0.490,1.000,  0.441,1.000,  0.441,0.846,  0.490,0.846,//Right
                    0.491,1.000,  0.491,0.846,  0.519,0.846,  0.519,1.000,//Top
                    0.519,1.000,  0.491,1.000,  0.491,0.846,  0.519,0.846,//Bottom
                     //Down
                    0.441,1.000,  0.441,0.846,  0.490,0.846,  0.490,1.000,//Left
                    0.490,1.000,  0.441,1.000,  0.441,0.846,  0.490,0.846,//Right
                    0.491,1.000,  0.491,0.846,  0.519,0.846,  0.519,1.000,//Top
                    0.519,1.000,  0.491,1.000,  0.491,0.846,  0.519,0.846//Bottom
                    };

    float vex_part[]={
                      0.17,0.02,0.22,  0.17,0.02,0.78,  0.17,0.9,0.78,  0.17,0.9,0.22, //Left
                      0.19,0.02,0.22,  0.19,0.9,0.22,  0.19,0.9,0.78,  0.19,0.02,0.78, //Right
                      0.17,0.9,0.22,  0.17,0.9,0.78,  0.19,0.9,0.78,  0.19,0.9,0.22, //Top
                      0.17,0.02,0.22,  0.19,0.02,0.22,  0.19,0.02,0.78,  0.17,0.02,0.78, //Bottom
                      0.19,0.02,0.22,  0.17,0.02,0.22,  0.17,0.9,0.22,  0.19,0.9,0.22, //Front
                      0.19,0.02,0.78,  0.19,0.9,0.78,  0.17,0.9,0.78,  0.17,0.02,0.78 //Back
                     };
    float offset=float(m_type-1)/10;
    float tex_part[]={
                      0.000+offset,0.650,  0.100+offset,0.650,  0.100+offset,0.805,  0.000+offset,0.805,
                      0.100+offset,0.650,  0.100+offset,0.805,  0.000+offset,0.805,  0.000+offset,0.650,
                      0.000+offset,0.631,  0.100+offset,0.631,  0.100+offset,0.648,  0.000+offset,0.648,
                      0.000+offset,0.631,  0.000+offset,0.648,  0.100+offset,0.648,  0.100+offset,0.631,
                      0.000+offset,0.648,  0.000+offset,0.631,  0.100+offset,0.631,  0.100+offset,0.648,
                      0.100+offset,0.631,  0.000+offset,0.631,  0.000+offset,0.648,  0.100+offset,0.648
                     };

glPushMatrix();
    glEnableClientState(GL_VERTEX_ARRAY);
    glEnableClientState(GL_TEXTURE_COORD_ARRAY);
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, m_textureID);
    glVertexPointer(3, GL_FLOAT, 0, vex_box);
    glTexCoordPointer(2, GL_FLOAT, 0, tex_box);
    glTranslatef(m_pos[0],m_pos[1],m_pos[2]);
    if (m_moving) {glRotatef(m_rot,0,1,0); glRotatef(-20,0,0,1);glTranslatef(-1.1,-1.3,-0.5);}
    glDrawArrays(GL_QUADS, 0, 212);
    glVertexPointer(3, GL_FLOAT, 0, vex_part);
    glTexCoordPointer(2, GL_FLOAT, 0, tex_part);
    for (int i=0;i<m_content;i++)
    {
        glDrawArrays(GL_QUADS, 0, 24);
        glTranslatef(0.035,0,0);
    }
glPopMatrix();
    glDisableClientState(GL_VERTEX_ARRAY);
    glDisableClientState(GL_TEXTURE_COORD_ARRAY);
    glDisable(GL_TEXTURE_2D);

}

bool buildbox::buildboxBulletHitTest(float xpos, float ypos, float zpos)
{
    float xhitbox=0.5;
    float yhitbox=0.75;
    float zhitbox=0.5;
    if (xpos>m_pos[0]-xhitbox+0.5 && xpos<m_pos[0]+xhitbox+0.5 &&
        ypos>m_pos[1]-yhitbox+0.5 && ypos<m_pos[1]+yhitbox+0.5 &&
        zpos>m_pos[2]-zhitbox+0.5 && zpos<m_pos[2]+zhitbox+0.5)
    return true;
    else
    return false;
}

void buildbox::place(float xpos,float height,float zpos)
{
    m_moving=false;
    m_pos[0]=(int)xpos;
    m_pos[1]=height;
    m_pos[2]=(int)zpos;
}
