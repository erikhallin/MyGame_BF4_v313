#include <gl\gl.h>
#include <gl\glu.h>
#include <math.h>
#include "unit.h"

unit::unit()
{
    m_online=false;
    m_spawnerOnline=false;
    m_moving=false;
    m_spawning=true;
    m_spawnerMoving=false;
    m_carrySpawner=false;
    m_carryID=-1;
    m_carryPow=false;
    m_carries=false;
    m_carryBBox=false;
    m_carryBBlock=false;
    m_HP=0;
    m_xpos=0, m_ypos=0, m_zpos=0;
    m_xvel=0, m_yvel=0, m_zvel=0;
    m_ybodyhed=90, m_zhed=90, m_yheadhed=90;
    m_xdir=0, m_ydir=0, m_zdir=0;
    m_progress=0;
    m_progress2=0;
    m_avgvel=0;
    m_ben=0;
    m_benbend=0;
    m_jumpState=0;
    m_playerID=0;
    m_size=1;
    m_currWeapon=0;
    m_prevWeapon=0;
    m_nextWeapon=0;
    m_deathCounter=1;
    m_stepTimer=0;
    m_add1=true;
    m_add2=true;
    m_add3=true;
    m_add4=true;
    m_loadedShovel=false;
    m_meleeAttackProg=0;
    m_interactionProg=0;
    m_rifleAttackProg=0;
    m_rifleAttackProg2=0;
    m_weaponSwapProg=0;
    m_team=0;
    m_inHands=0; // 1 buildbox, 2 buildblock, 4 wall, 5 terrain, 6 mine, 7 turret, 8 outpost
    for (int i=0;i<10;i++) m_inventory[i]=false;
    m_inventory[0]=true; //Melee
    m_zooming=false;
    m_carryType=0;
    m_inTransportType=0;
    m_transportFloat=0;
    m_fireCount=0;
    m_hitCount=0;
    m_healingDelay=0;
}

// 0 = Death (HP<1)  1 = normal movement  2 = spawning done  3 = spawning aborted  4 = spawning updated
int unit::updateUnit(float cycleTime)
{
    //Calculate Heading Vectors
    float piover180=0.0174532925;
    m_xdir=sinf(m_zhed*piover180)*cosf(m_yheadhed*piover180);
    m_ydir=cosf(m_zhed*piover180);
    m_zdir=-sinf(m_zhed*piover180)*sinf(m_yheadhed*piover180);

    if (m_healingDelay>0) m_healingDelay-=cycleTime;
    if (m_currWeapon!=0) m_loadedShovel=false;
    if (m_meleeAttackProg>0) //Update melee attack progress
    {
        if (m_add3) m_meleeAttackProg+=cycleTime*0.01;
        else m_meleeAttackProg-=cycleTime*0.005;
        if (m_meleeAttackProg>1) m_add3=false;
        if (m_meleeAttackProg<0) {m_meleeAttackProg=0; m_add3=true;}
    }
    if (m_interactionProg>0) //Update interaction progress
    {
        if (m_add3) m_interactionProg+=cycleTime*0.02;
        else m_interactionProg-=cycleTime*0.01;
        if (m_interactionProg>1) m_add3=false;
        if (m_interactionProg<0) {m_interactionProg=0; m_add3=true;}
    }
    if (m_rifleAttackProg>0) //Update recoil progress
    {
        switch (m_currWeapon)
        {
            case 1: if (m_add3) m_rifleAttackProg+=cycleTime*0.01;
                    else m_rifleAttackProg-=cycleTime*0.005;
                    break;
            case 2: if (m_add3) m_rifleAttackProg+=cycleTime*0.02;
                    else m_rifleAttackProg-=cycleTime*0.02;
                    break;
            case 3: if (m_add3) m_rifleAttackProg+=cycleTime*0.01;
                    else m_rifleAttackProg-=cycleTime*0.001;
                    break;
            case 4: if (m_add3) m_rifleAttackProg+=cycleTime*0.01;
                    else m_rifleAttackProg-=cycleTime*0.004;
                    break;
          /*  case 6: if (m_add3) m_rifleAttackProg+=cycleTime*0.015;
                    else m_rifleAttackProg-=cycleTime*0.003;
                    break;
            case 7: if (m_add3) m_rifleAttackProg+=cycleTime*0.015;
                    else m_rifleAttackProg-=cycleTime*0.003;
                    break;*/
            default: m_rifleAttackProg=0; m_add3=true; break;
        }
        if (m_rifleAttackProg>1) m_add3=false;
        if (m_rifleAttackProg<0) {m_rifleAttackProg=0; m_add3=true;}
    }
    if (m_weaponSwapProg>0) //Update weapon swap progress
    {
        if (m_add4) m_weaponSwapProg+=cycleTime*0.007;
        else m_weaponSwapProg-=cycleTime*0.007;
        if (m_weaponSwapProg>1) {m_add4=false; m_prevWeapon=m_currWeapon; m_currWeapon=m_nextWeapon;}
        if (m_weaponSwapProg<0) {m_weaponSwapProg=0; m_add4=true;}
    }
    if (m_spawning) //Update spawning animation
    {
        if (m_size==1) {m_size=0;m_progress=0;m_ybodyhed=90, m_zhed=90, m_yheadhed=90;m_jumpState=0;m_ben=-0.5;m_benbend=0;} //Init
        if (!m_spawnerMoving)
        {
            m_size+=cycleTime*0.0005;
            m_ypos+=cycleTime*0.0005*2;
        }
        else
        {
            m_size=0;
            return 3;
        }
        if (m_size>1) {m_size=1; return 2;}
        return 4;
    }
    else //Player is already spawned
    {
        if (m_HP<1) //Player dead
        {

            return 0;
        }
        if (m_moving)
        {
            //Leg progress
            if (m_jumpState==0)
            {
                if (m_stepTimer<100) m_stepTimer+=m_avgvel*30;
                m_xpos+=0.1;
                if (m_progress>1) m_add1=false;
                if (m_progress<0) m_add1=true;

                if (m_add1) m_progress+=m_avgvel*0.5;
                else m_progress-=m_avgvel*0.5;
                m_ben=-m_progress;
                m_benbend=0;
            }
            //Body Adjustment
            if (m_yheadhed<m_ybodyhed) m_ybodyhed-=2;
            if (m_yheadhed>m_ybodyhed) m_ybodyhed+=2;
            //Arm progress
            if (m_progress2>0.99) m_add2=false;
            if (m_progress2<0.01) m_add2=true;
            if (m_add2) m_progress2+=m_avgvel*0.2;
            else m_progress2-=m_avgvel*0.2;
            m_arm1=(1.1-m_progress2);
            m_arm2=(m_progress2+0.1);
        }
        else
        {
            m_ben=-0.5;
            m_arm1=m_arm2=1.1;
        }
        if (m_jumpState==1)
        {
            if (m_benbend<0.5) m_benbend+=0.015;
        }
        if (m_jumpState==2)
        {
            m_benbend=0;
            m_ben=-0.5;
        }
        m_zhed=90+(m_zhed-90)/2;
        //Head adjustment
        if (m_yheadhed>m_ybodyhed+80) m_ybodyhed+=1;
        if (m_yheadhed<m_ybodyhed-80) m_ybodyhed-=1;
        if (m_inTransportType!=0)
        {
            m_moving=false;
            m_ybodyhed=m_yheadhed;
            m_benbend=0;
            m_ben=-0.5;
        }
    }
    return 1;
}

bool unit::unitBulletHitTest(float xpos, float ypos, float zpos)
{
    float xhitbox=1;
    float yhitbox=1;
    float zhitbox=1;
    if (xpos>m_xpos-xhitbox && xpos<m_xpos+xhitbox &&
        ypos>m_ypos-yhitbox-1 && ypos<m_ypos+yhitbox-1 &&
        zpos>m_zpos-zhitbox && zpos<m_zpos+zhitbox)
    return true;
    else
    return false;
}

void unit::drawUnit(void)
{
    if (m_deathCounter>0) return;
    if (!m_spawnerOnline || m_inTransportType==3) return;
    if (m_spawnerMoving && m_spawning) return;
    float body[]={-1,-1, 1,  1,-1, 1,  1, 1, 1, -1, 1, 1,//  1 2 3 4 //back
                   1,-1, 1,  1,-1,-1,  1, 1,-1,  1, 1, 1,//  2 5 6 3 //R side
                   1,-1,-1, -1,-1,-1, -1, 1,-1,  1, 1,-1,//  5 7 8 6 //front
                  -1,-1,-1, -1,-1, 1, -1, 1, 1, -1, 1,-1,//  7 1 4 8 //L side
                  -1,-1,-1,  1,-1,-1,  1,-1, 1, -1,-1, 1,//  7 5 2 1 //bottom
                  -1, 1, 1,  1, 1, 1,  1, 1,-1, -1, 1,-1};// 4 3 6 8 //top
                  //1 2 5 7 mörkare
                  //3 4 6 8 ljusare

    float tex_body[]={0.293,0.648,  0.469,0.648,  0.469,0.883,  0.293,0.883,
                      0.176,0.648,  0.293,0.648,  0.293,0.883,  0.176,0.883,
                      0,0.648,  0.176,0.648,  0.176,0.883,  0,0.883,
                      0.176,0.648,  0.293,0.648,  0.293,0.883,  0.176,0.883,
                      0.469,0.648,  0.644,0.648,  0.644,0.766,  0.469,0.766,
                      0.469,0.766,  0.644,0.766,  0.644,0.883,  0.469,0.883
                     };

    float tex_head[]={0,0.883,  0.117,0.883,  0.117,1,  0,1,
                      0.117,0.883,  0.234,0.883,  0.234,1,  0.117,1,
                      0.234,0.883,  0.351,0.883,  0.351,1,  0.234,1,
                      0.351,0.883,  0.469,0.883,  0.469,1,  0.351,1,
                      0.469,0.883,  0.586,0.883,  0.586,1,  0.469,1,
                      0.586,0.883,  0.703,0.883,  0.703,1,  0.586,1
                     };
    float tex_leg[]={0.645,0.648,  0.742,0.648,  0.742,0.883,  0.645,0.883,
                     0.645,0.648,  0.742,0.648,  0.742,0.883,  0.645,0.883,
                     0.645,0.648,  0.742,0.648,  0.742,0.883,  0.645,0.883,
                     0.645,0.648,  0.742,0.648,  0.742,0.883,  0.645,0.883,
                     0,0,  0.1,0,  0.1,0.1,  0,0.1,
                     0,0,  0.1,0,  0.1,0.1,  0,0.1
                    };

    float tex_foot[]={0,0,  0.1,0,  0.1,0.1,  0,0.1,
                      0,0,  0.1,0,  0.1,0.1,  0,0.1,
                      0,0,  0.1,0,  0.1,0.1,  0,0.1,
                      0,0,  0.1,0,  0.1,0.1,  0,0.1,
                      0,0,  0.1,0,  0.1,0.1,  0,0.1,
                      0,0,  0.1,0,  0.1,0.1,  0,0.1
                     };

    float tex_neck[]={0,0,  0.1,0,  0.1,0.1,  0,0.1,
                      0,0,  0.1,0,  0.1,0.1,  0,0.1,
                      0,0,  0.1,0,  0.1,0.1,  0,0.1,
                      0,0,  0.1,0,  0.1,0.1,  0,0.1,
                      0,0,  0.1,0,  0.1,0.1,  0,0.1,
                      0,0,  0.1,0,  0.1,0.1,  0,0.1
                     };
   /*
                        M,M,L,L
                        M,M,L,L
                        M,M,L,L
                        M,M,L,L
                        M,M,M,M
                        L,L,L,L
   */
    float color0[]={0.3,0.3,0.7, 0.3,0.3,0.7, 0.5,0.5,0.9, 0.5,0.5,0.9,
                    0.3,0.3,0.7, 0.3,0.3,0.7, 0.5,0.5,0.9, 0.5,0.5,0.9,
                    0.3,0.3,0.7, 0.3,0.3,0.7, 0.5,0.5,0.9, 0.5,0.5,0.9,
                    0.3,0.3,0.7, 0.3,0.3,0.7, 0.5,0.5,0.9, 0.5,0.5,0.9,
                    0.3,0.3,0.7, 0.3,0.3,0.7, 0.3,0.3,0.7, 0.3,0.3,0.7,
                    0.5,0.5,0.9, 0.5,0.5,0.9, 0.5,0.5,0.9, 0.5,0.5,0.9
                    };
    float color1[]={0.3,0.7,0.3, 0.3,0.7,0.3, 0.5,0.9,0.5, 0.5,0.9,0.5,
                    0.3,0.7,0.3, 0.3,0.7,0.3, 0.5,0.9,0.5, 0.5,0.9,0.5,
                    0.3,0.7,0.3, 0.3,0.7,0.3, 0.5,0.9,0.5, 0.5,0.9,0.5,
                    0.3,0.7,0.3, 0.3,0.7,0.3, 0.5,0.9,0.5, 0.5,0.9,0.5,
                    0.3,0.7,0.3, 0.3,0.7,0.3, 0.3,0.7,0.3, 0.3,0.7,0.3,
                    0.5,0.9,0.5, 0.5,0.9,0.5, 0.5,0.9,0.5, 0.5,0.9,0.5
                    };
    float color2[]={0.7,0.3,0.3, 0.7,0.3,0.3, 0.9,0.5,0.5, 0.9,0.5,0.5,
                    0.7,0.3,0.3, 0.7,0.3,0.3, 0.9,0.5,0.5, 0.9,0.5,0.5,
                    0.7,0.3,0.3, 0.7,0.3,0.3, 0.9,0.5,0.5, 0.9,0.5,0.5,
                    0.7,0.3,0.3, 0.7,0.3,0.3, 0.9,0.5,0.5, 0.9,0.5,0.5,
                    0.7,0.3,0.3, 0.7,0.3,0.3, 0.7,0.3,0.3, 0.7,0.3,0.3,
                    0.9,0.5,0.5, 0.9,0.5,0.5, 0.9,0.5,0.5, 0.9,0.5,0.5
                    };
    float color3[]={0.7,0.1,0.7, 0.8,0.0,0.6, 0.9,0.1,0.9, 0.8,0.4,0.8,
                    0.8,0.0,0.6, 0.5,0.2,0.5, 0.6,0.1,0.5, 0.9,0.1,0.9,
                    0.5,0.2,0.5, 0.6,0.1,0.4, 0.7,0.0,0.6, 0.6,0.1,0.5,
                    0.6,0.1,0.4, 0.7,0.1,0.7, 0.8,0.4,0.8, 0.7,0.0,0.6,
                    0.6,0.1,0.4, 0.5,0.2,0.5, 0.8,0.0,0.6, 0.7,0.1,0.7,
                    0.8,0.4,0.8, 0.9,0.1,0.9, 0.6,0.1,0.5, 0.7,0.0,0.6};
    float color4[]={0.4,0.3,0.3, 0.5,0.4,0.4, 0.4,0.4,0.5, 0.4,0.5,0.3,
                    0.5,0.4,0.4, 0.2,0.3,0.3, 0.1,0.2,0.3, 0.4,0.4,0.5,
                    0.2,0.3,0.3, 0.1,0.2,0.3, 0.3,0.3,0.3, 0.1,0.2,0.3,
                    0.1,0.2,0.3, 0.4,0.3,0.3, 0.4,0.5,0.3, 0.3,0.3,0.3,
                    0.1,0.2,0.3, 0.2,0.3,0.3 ,0.5,0.4,0.4, 0.4,0.3,0.3,
                    0.4,0.5,0.3, 0.4,0.4,0.5, 0.1,0.2,0.3, 0.3,0.3,0.3};
    float color5[]={0.8,0.4,0.3, 0.8,0.3,0.1, 0.9,0.5,0.1, 0.9,0.4,0.0,
                    0.8,0.3,0.1, 0.6,0.3,0.0, 0.7,0.3,0.0, 0.9,0.5,0.1,
                    0.6,0.3,0.0, 0.5,0.2,0.1, 0.5,0.3,0.0, 0.7,0.3,0.0,
                    0.5,0.2,0.1, 0.8,0.4,0.3, 0.9,0.4,0.0, 0.5,0.3,0.0,
                    0.5,0.2,0.1, 0.6,0.3,0.0, 0.8,0.3,0.1, 0.8,0.4,0.3,
                    0.9,0.4,0.0, 0.9,0.5,0.1, 0.7,0.3,0.0, 0.5,0.3,0.0};
    float color6[]={0.2,0.8,0.8, 0.3,0.7,0.6, 0.2,0.6,0.7, 0.3,0.6,0.8,
                    0.3,0.7,0.6, 0.0,0.5,0.5, 0.1,0.3,0.4, 0.2,0.6,0.7,
                    0.0,0.5,0.5, 0.1,0.4,0.5, 0.0,0.6,0.5, 0.1,0.3,0.4,
                    0.1,0.4,0.5, 0.2,0.8,0.8, 0.3,0.6,0.8, 0.0,0.6,0.5,
                    0.1,0.4,0.5, 0.0,0.5,0.5, 0.3,0.7,0.6, 0.2,0.8,0.8,
                    0.3,0.6,0.8, 0.2,0.6,0.7, 0.1,0.3,0.4, 0.0,0.6,0.5};
    float color7[]={0.9,0.8,0.8, 0.8,0.9,0.9, 0.8,0.8,0.8, 0.7,0.8,0.9,
                    0.8,0.9,0.9, 0.5,0.5,0.5, 0.5,0.3,0.4, 0.8,0.8,0.8,
                    0.5,0.5,0.5, 0.4,0.4,0.5, 0.6,0.6,0.5, 0.5,0.3,0.4,
                    0.4,0.4,0.5, 0.9,0.8,0.8, 0.7,0.8,0.9, 0.6,0.6,0.5,
                    0.4,0.4,0.5, 0.5,0.5,0.5, 0.8,0.9,0.9, 0.9,0.8,0.8,
                    0.7,0.8,0.9, 0.8,0.8,0.8, 0.5,0.3,0.4, 0.6,0.6,0.5};

    float arm[]={   0,-0.3,0,  0,0,0,  0,0,-2,  0,-0.3,-2,
                    0,0,0,  0.3,0,0,  0.3,0,-2,  0,0,-2,
                    0.3,0,0,  0.3,-0.3,0,  0.3,-0.3,-2, 0.3,0,-2,
                    0.3,-0.3,0,  0,-0.3,0,  0,-0.3,-2,  0.3,-0.3,-2,
                    0,0,0,  0,-0.3,0,  0.3,-0.3,0,  0.3,0,0,
                    0,0,-2,  0.3,0,-2,  0.3,-0.3,-2,  0,-0.3,-2
                    };

    float tex_arm[]={0.742,0.648,  0.840,0.648,  0.840,0.883,  0.742,0.883,
                     0.742,0.648,  0.840,0.648,  0.840,0.883,  0.742,0.883,
                     0.742,0.648,  0.840,0.648,  0.840,0.883,  0.742,0.883,
                     0.742,0.648,  0.840,0.648,  0.840,0.883,  0.742,0.883,
                     0.742,0.883,  0.840,0.883,  0.840,1,  0.742,1,
                     0.742,0.883,  0.840,0.883,  0.840,1,  0.742,1,
                    };
                            //Arm
    float color_rightArm[]={/*0,0,0, 0,0,0, 0,0,0, 0,0,0,
                            0,0,0, 0,0,0, 0,0,0, 0,0,0,
                            0,0,0, 0,0,0, 0,0,0, 0,0,0,
                            0,0,0, 0,0,0, 0,0,0, 0,0,0,
                            0,0,0, 0,0,0, 0,0,0, 0,0,0,
                            0,0,0, 0,0,0, 0,0,0, 0,0,0,*/
                            //Rifle
                            0.4,0.4,0.4, 0.1,0.1,0.1, 0.1,0.1,0.1, 0.4,0.4,0.4,
                            0.4,0.4,0.4, 0.4,0.4,0.4, 0.1,0.1,0.1, 0.1,0.1,0.1,
                            0.4,0.4,0.4, 0.4,0.4,0.4, 0.1,0.1,0.1, 0.1,0.1,0.1,
                            0.4,0.4,0.4, 0.1,0.1,0.1, 0.1,0.1,0.1, 0.4,0.4,0.4,
                            //Magasin
                            0.1,0.1,0.1, 0.1,0.1,0.1, 0.2,0.2,0.2, 0.2,0.2,0.2,
                            0.1,0.1,0.1, 0.2,0.2,0.2, 0.2,0.2,0.2, 0.1,0.1,0.1,
                            0.2,0.2,0.2, 0.2,0.2,0.2, 0.2,0.2,0.2, 0.2,0.2,0.2,
                            0.1,0.1,0.1, 0.2,0.2,0.2, 0.2,0.2,0.2, 0.1,0.1,0.1,
                            0.1,0.1,0.1, 0.1,0.1,0.1, 0.2,0.2,0.2, 0.2,0.2,0.2,
                            //Scope
                            0.3,0.3,0.3, 0.2,0.2,0.2, 0.1,0.1,0.1, 0.2,0.2,0.2,
                            0.3,0.3,0.3, 0.2,0.2,0.2, 0.2,0.2,0.2, 0.3,0.3,0.3,
                            0.3,0.3,0.3, 0.2,0.2,0.2, 0.1,0.1,0.1, 0.2,0.2,0.2,
                            0.2,0.2,0.2, 0.2,0.2,0.2, 0.1,0.1,0.1, 0.1,0.1,0.1,

                            0.2,0.2,0.2, 0.2,0.2,0.2, 0.1,0.1,0.1, 0.1,0.1,0.1,

                            0.2,0.2,0.2, 0.2,0.2,0.2, 0.1,0.1,0.1, 0.1,0.1,0.1
                            };

    float rightArm[]={
/*                    //Arm
                    0,0,0,  0,0,-2,  0,-0.3,-2,  0,-0.3,0,
                    0.3,0,0,  0.3,0,-2,  0,0,-2, 0,0,0,
                    0.3,0,0,  0.3,-0.3,0,  0.3,-0.3,-2, 0.3,0,-2,
                    0.3,-0.3,0,  0,-0.3,0,  0,-0.3,-2,  0.3,-0.3,-2,
                    0,0,0,  0,-0.3,0,  0.3,-0.3,0,  0.3,0,0,
                    0,0,-2,  0.3,0,-2,  0.3,-0.3,-2,  0,-0.3,-2,
*/                    //Rifle
                    0.1,-0.1,-2,  0.1,-0.1,-2.9,  0.1,-0.2,-2.9,  0.1,-0.2,-2, //Left
                    0.2,-0.1,-2,  0.1,-0.1,-2,  0.1,-0.1,-2.9,  0.2,-0.1,-2.9, //Top
                    0.2,-0.1,-2,  0.2,-0.2,-2,  0.2,-0.2,-2.9, 0.2,-0.1,-2.9,  //Right
                    0.2,-0.2,-2,  0.2,-0.2,-2.9,  0.1,-0.2,-2.9,  0.1,-0.2,-2, //Bottom
                    //Magasin
                    0.1,-0.3,-1.5,  0.1,-0.3,-1.8,  0.1,-0.7,-1.8,  0.1,-0.7,-1.5, //Inner side
                    0.2,-0.3,-1.5,  0.2,-0.7,-1.5,  0.2,-0.7,-1.8,  0.2,-0.3,-1.8, //Outer side
                    0.1,-0.7,-1.5,  0.1,-0.7,-1.8,  0.2,-0.7,-1.8,  0.2,-0.7,-1.5, //Bottom
                    0.1,-0.3,-1.5,  0.1,-0.7,-1.5,  0.2,-0.7,-1.5,  0.2,-0.3,-1.5, //Back
                    0.1,-0.3,-1.8,  0.2,-0.3,-1.8,  0.2,-0.7,-1.8,  0.1,-0.7,-1.8, //Front
                    //Scope
                    0.05,0.4,-1,  0.05,0.4,-1.9,  0.05,0.2,-1.9,  0.05,0.2,-1,
                    0.25,0.4,-1,  0.25,0.4,-1.9,  0.05,0.4,-1.9,  0.05,0.4,-1,
                    0.25,0.4,-1,  0.25,0.2,-1,  0.25,0.2,-1.9,  0.25,0.4,-1.9,
                    0.25,0.2,-1,  0.05,0.2,-1,  0.05,0.2,-1.9,  0.25,0.2,-1.9,
                    //Stand
                    0.15,0,-1.6,  0.15,0,-1.7,  0.15,0.2,-1.7,  0.15,0.2,-1.6,
                    0.15,0,-1.2,  0.15,0,-1.3,  0.15,0.2,-1.3,  0.15,0.2,-1.2
                  };
    float tex_rightArm[]={//Barrel
                          0.742,0.883,  0.742,1,  0.703,1, 0.703,0.883,
                          0.742,0.883,  0.703,0.883,  0.703,1,  0.742,1,
                          0.703,0.883,  0.742,0.883,  0.742,1,  0.703,1,
                          0.703,0.883,  0.703,1, 0.742,1,  0.742,0.883,
                          //Magasin
                          0.918,1,  0.840,1,  0.840,0.883,  0.918,0.883,
                          0.918,0.883,  0.918,1,  0.840,1,  0.840,0.883,
                          0.957,1, 0.957,0.883,  1,0.883,  1,1,
                          0.918,1,  0.918,0.883,  0.957,0.883, 0.957,1,
                          0.918,0.883,  0.957,0.883, 0.957,1,  0.918,1,
                          //Scope
                          0.840,0.883,  0.840,0.738,  0.918,0.738,  0.918,0.883,
                          0.840,0.883,  0.840,0.738,  0.918,0.738,  0.918,0.883,
                          0.840,0.738,  0.918,0.738,  0.918,0.883,  0.840,0.883,
                          0.840,0.738,  0.918,0.738,  0.918,0.883,  0.840,0.883,
                          //Stand
                          0.918,0.828,  1,0.828,  1,0.883,  0.918,0.883,
                          0.918,0.828,  1,0.828,  1,0.883,  0.918,0.883
                         };
    float leftArm[]={
                    //Arm
                    0,0,0,  0,0,-1.5,  0,-0.3,-1.5,  0,-0.3,0,
                    0.3,0,0,  0,0,0,  0,0,-1.5,  0.3,0,-1.5,
                    0.3,0,0,  0.3,-0.3,0,  0.3,-0.3,-1.5, 0.3,0,-1.5,
                    0.3,-0.3,0,  0.3,-0.3,-1.5,  0,-0.3,-1.5,  0,-0.3,0,
                    0,0,0,  0,-0.3,0,  0.3,-0.3,0,  0.3,0,0,
                    0,0,-1.5,  0.3,0,-1.5,  0.3,-0.3,-1.5,  0,-0.3,-1.5,
                    //Front
                    0,0,-1.5,  -0.2,0.2,-1.8,  -0.2,-0.5,-1.8,  0,-0.3,-1.5,
                    0.3,0,-1.5,  0.5,0.2,-1.8,  -0.2,0.2,-1.8,  0,0,-1.5,
                    0.3,0,-1.5,  0.3,-0.3,-1.5, 0.5,-0.5,-1.8,  0.5,0.2,-1.8,
                    0.3,-0.3,-1.5,  0,-0.3,-1.5, -0.2,-0.5,-1.8,  0.5,-0.5,-1.8
                  };
    float dubbleArm[]={
/*                    0,0,0,  0,0,-2.5,  0,-1,-2.5,  0,-1,0,
                    1,0,0,  1,0,-2.5,  0,0,-2.5,  0,0,0,
                    1,0,0,  1,-1,0,  1,-1,-2.5, 1,0,-2.5,
                    1,-1,0,  0,-1,0,  0,-1,-2.5,  1,-1,-2.5,
                    0,0,0,  0,-1,0,  1,-1,0,  1,0,0,

                    0.1,-0.1,-2.3,  -0.1,0.1,-2.7,  -0.1,-1.1,-2.7,  0.1,-0.9,-2.3,
                    0.1,-0.1,-2.3,  0.9,-0.1,-2.3,  1.1,0.1,-2.7,  -0.1,0.1,-2.7,
                    0.9,-0.9,-2.3,  0.9,-0.1,-2.3,  1.1,0.1,-2.7,  1.1,-1.1,-2.7,
                    0.9,-0.9,-2.3,  0.1,-0.9,-2.3,  -0.1,-1.1,-2.7,  1.1,-1.1,-2.7,
                    0.1,-0.1,-2.3,  0.9,-0.1,-2.3,  0.9,-0.9,-2.3,  0.1,-0.9,-2.3,
*/                    //Left arm
                    0,-0.2,-1.0,  0,-2.5,-1,  -0.3,-2.5,-1.0,  -0.3,-0.2,-1.0,
                    0,-0.2,-1.3,  -0.3,-0.2,-1.3,  -0.3,-2.5,-1.3,  0,-2.5,-1.3,
                    0,-0.2,-1.0,  0,-2.5,-1,  0,-2.5,-1.3,  0,-0.2,-1.3,
                    -0.3,-0.2,-1.0,  -0.3,-0.2,-1.3,  -0.3,-2.5,-1.3,  -0.3,-2.5,-1,
                    0,-0.2,-1,  0,-0.2,-1.3,  -0.3,-0.2,-1.3,  -0.3,-0.2,-1,
                    0,-2.5,-1,  -0.3,-2.5,-1,  -0.3,-2.5,-1.3,  0,-2.5,-1.3,
                    //Right arm
                    1.3,-0.2,-1.0,  1.3,-2.5,-1,  1,-2.5,-1.0,  1,-0.2,-1.0,
                    1.3,-0.2,-1.3,  1,-0.2,-1.3,  1,-2.5,-1.3,  1.3,-2.5,-1.3,
                    1.3,-0.2,-1.0,  1.3,-2.5,-1,  1.3,-2.5,-1.3,  1.3,-0.2,-1.3,
                    1,-0.2,-1.0,  1,-0.2,-1.3,  1,-2.5,-1.3,  1,-2.5,-1,
                    1.3,-0.2,-1,  1.3,-0.2,-1.3,  1,-0.2,-1.3,  1,-0.2,-1,
                    1.3,-2.5,-1,  1,-2.5,-1,  1,-2.5,-1.3,  1.3,-2.5,-1.3
                    };
    float cannon[]={
                    0,0,0,  0,0,-2.5,  0,-1,-2.5,  0,-1,0,  //L side
                    1,0,0,  1,0,-2.5,  0,0,-2.5,  0,0,0,    //Top
                    1,0,0,  1,-1,0,  1,-1,-2.5, 1,0,-2.5,   //R side
                    1,-1,0,  0,-1,0,  0,-1,-2.5,  1,-1,-2.5,//Bottom
                    0,0,0,  0,-1,0,  1,-1,0,  1,0,0,        //Back

                    0.1,-0.1,-2.3,  -0.1,0.1,-2.7,  -0.1,-1.1,-2.7,  0.1,-0.9,-2.3,
                    0.1,-0.1,-2.3,  0.9,-0.1,-2.3,  1.1,0.1,-2.7,  -0.1,0.1,-2.7,
                    0.9,-0.9,-2.3,  0.9,-0.1,-2.3,  1.1,0.1,-2.7,  1.1,-1.1,-2.7,
                    0.9,-0.9,-2.3,  0.1,-0.9,-2.3,  -0.1,-1.1,-2.7,  1.1,-1.1,-2.7,
                    0.1,-0.1,-2.3,  0.9,-0.1,-2.3,  0.9,-0.9,-2.3,  0.1,-0.9,-2.3 //Front
                    };
    float tex_cannon[]={0.117,0.414,  0.117,0.643,  0,0.643,  0,0.414,
                        0.117,0.414,  0.117,0.643,  0,0.643,  0,0.414,
                        0,0.414,  0.117,0.414,  0.117,0.643,  0,0.643,
                        0,0.414,  0.117,0.414,  0.117,0.643,  0,0.643,
                        0.117,0.643,  0.117,0.531,  0.234,0.531,  0.234,0.643,

                        0.842,0.648,  0.842,0.734,  1,0.734,  1,0.648,
                        1,0.648,  0.842,0.648,  0.842,0.734,  1,0.734,
                        0.842,0.648,  1,0.648,  1,0.734,  0.842,0.734,
                        1,0.648,  0.842,0.648,  0.842,0.734,  1,0.734,
                        0.117,0.414,  0.234,0.414,  0.234,0.531,  0.117,0.531
                       };

    float color_cannon[]={
                             0.3,0.3,0.3, 0.2,0.2,0.2, 0.2,0.2,0.2, 0.3,0.3,0.3,
                             0.3,0.3,0.3, 0.2,0.2,0.2, 0.2,0.2,0.2, 0.3,0.3,0.3,
                             0.3,0.3,0.3, 0.3,0.3,0.3, 0.2,0.2,0.2, 0.2,0.2,0.2,
                             0.3,0.3,0.3, 0.3,0.3,0.3, 0.2,0.2,0.2, 0.2,0.2,0.2,
                             0.3,0.3,0.3, 0.3,0.3,0.3, 0.3,0.3,0.3, 0.3,0.3,0.3,

                             0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1,
                             0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1,
                             0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1,
                             0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1,
                             0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1
                         };
    float radar[]={ //Bottom
                    0,0,0,  -2,0,0,  -2,1,0,  0,1,0,
                    //Sides
                    0,0,0,  0,0,0.2,  0,1,0.2,  0,1,0,
                    -2,0,0,  -2,1,0,  -2,1,0.2,  -2,0,0.2,
                    0,0,0,  0,0,0.2,  -2,0,0.2,  -2,0,0,
                    0,1,0,  -2,1,0,  -2,1,0.2,  0,1,0.2,
                    //Frame
                    0,0,0.2,  0,1,0.2,  -0.1,0.9,0.2,  -0.1,0.1,0.2,
                    0,1,0.2,  -2,1,0.2,  -1.9,0.9,0.2,  -0.1,0.9,0.2,
                    -2,1,0.2,  -2,0,0.2,  -1.9,0.1,0.2,  -1.9,0.9,0.2,
                    -2,0,0.2,  0,0,0.2,  -0.1,0.1,0.2,  -1.9,0.1,0.2
                    };
    float tex_radar[]={//Bottom
                       0.344,0.539,  0.500,0.539,  0.500,0.645,  0.344,0.645,
                       //Sides
                       0.234,0.414,  0.285,0.414,  0.285,0.645,  0.234,0.645,
                       0.234,0.645,  0.234,0.414,  0.285,0.414,  0.285,0.645,
                       0.234,0.414,  0.285,0.414,  0.285,0.645,  0.234,0.645,
                       0.234,0.645,  0.234,0.414,  0.285,0.414,  0.285,0.645,
                       //Frame
                       0.285,0.645,  0.285,0.414,  0.340,0.414,  0.340,0.645,
                       0.285,0.645,  0.285,0.414,  0.340,0.414,  0.340,0.645,
                       0.285,0.645,  0.285,0.414,  0.340,0.414,  0.340,0.645,
                       0.285,0.645,  0.285,0.414,  0.340,0.414,  0.340,0.645
                      };

    float color_radar[]={ //Bottom
                          0.1,0.1,0.1,  0.1,0.1,0.1,  0.2,0.2,0.2,  0.2,0.2,0.2,
                          //Sides
                          0.1,0.1,0.1,  0.1,0.1,0.1,  0.3,0.3,0.3,  0.3,0.3,0.3,
                          0.1,0.1,0.1,  0.3,0.3,0.3,  0.3,0.3,0.3,  0.1,0.1,0.1,
                          0.1,0.1,0.1,  0.1,0.1,0.1,  0.1,0.1,0.1,  0.1,0.1,0.1,
                          0.3,0.3,0.3,  0.3,0.3,0.3,  0.3,0.3,0.3,  0.3,0.3,0.3,
                          //Frame
                          0.3,0.3,0.3,  0.3,0.3,0.3,  0.1,0.1,0.1,  0.1,0.1,0.1,
                          0.3,0.3,0.3,  0.3,0.3,0.3,  0.1,0.1,0.1,  0.1,0.1,0.1,
                          0.3,0.3,0.3,  0.3,0.3,0.3,  0.1,0.1,0.1,  0.1,0.1,0.1,
                          0.3,0.3,0.3,  0.3,0.3,0.3,  0.1,0.1,0.1,  0.1,0.1,0.1,
                        };
    float block[]={0,0,0, 0,1,0, 1,1,0, 1,0,0, //Front
                   0,0,1, 0,1,1, 1,1,1, 1,0,1, //Back
                   0,0,0, 0,0,1, 0,1,1, 0,1,0, //Left
                   1,0,0, 1,1,0, 1,1,1, 1,0,1, //Right
                   0,0,0, 0,0,1, 1,0,1, 1,0,0, //Bottom
                   0,1,0, 1,1,0, 1,1,1, 0,1,1  //Top
                  };
    float tex_block[]={0.879,0.527,  1,0.527,  1,0.645,  0.879,0.645,
                       0.879,0.527,  1,0.527,  1,0.645,  0.879,0.645,
                       0.879,0.527,  1,0.527,  1,0.645,  0.879,0.645,
                       0.879,0.527,  1,0.527,  1,0.645,  0.879,0.645,
                       0.879,0.527,  0.879,0.645,  1,0.645,  1,0.527,
                       0.879,0.527,  0.879,0.645,  1,0.645,  1,0.527
                      };

    float color_block[]={0.85,0.8,0.6, 0.95,0.9,0.7, 0.95,0.9,0.7, 0.85,0.8,0.6,
                         0.85,0.8,0.6, 0.95,0.9,0.7, 0.99,0.99,0.8, 0.85,0.8,0.6,
                         0.85,0.8,0.6, 0.85,0.8,0.6, 0.95,0.9,0.7, 0.95,0.9,0.7,
                         0.85,0.8,0.6, 0.95,0.9,0.7, 0.99,0.99,0.8, 0.85,0.8,0.6,
                         0.85,0.8,0.6, 0.85,0.8,0.6, 0.85,0.8,0.6, 0.85,0.8,0.6,
                         0.95,0.9,0.7, 0.95,0.9,0.7, 0.99,0.99,0.8, 0.95,0.9,0.7};

    float tex_block_mine[]={0.344,0.414,  0.465,0.414,  0.465,0.535,  0.344,0.535,
                            0.344,0.414,  0.465,0.414,  0.465,0.535,  0.344,0.535,
                            0.465,0.414,  0.500,0.414,  0.500,0.535,  0.465,0.535,
                            0.465,0.535,  0.465,0.414,  0.500,0.414,  0.500,0.535,
                            0.465,0.535,  0.500,0.535,  0.500,0.414,  0.465,0.414,
                            0.465,0.414,  0.465,0.535,  0.500,0.535,  0.500,0.414
                           };

    float color_block_mine[]={
                         0.6,0.6,0.3,  0.8,0.8,0.4,  0.8,0.8,0.4,  0.8,0.8,0.4,
                         0.6,0.6,0.3,  0.8,0.8,0.4,  0.6,0.6,0.3,  0.8,0.8,0.4,
                         0.8,0.8,0.4,  0.8,0.8,0.4,  0.8,0.8,0.4,  0.6,0.6,0.3,
                         0.8,0.8,0.4,  0.8,0.8,0.4,  0.6,0.6,0.3,  0.8,0.8,0.4,
                         0.8,0.8,0.4,  0.6,0.6,0.3,  0.8,0.8,0.4,  0.8,0.8,0.4,
                         0.8,0.8,0.4,  0.8,0.8,0.4,  0.6,0.6,0.3,  0.8,0.8,0.4};

    float stand[]={0.25,0,0.25,  0.25,0,0.75,  0.25,1.5,0.75,  0.25,1.5,0.25,
                   0.75,0,0.25,  0.75,1.5,0.25,  0.75,1.5,0.75,  0.75,0,0.75,
                   0.25,0,0.75,  0.75,0,0.75,  0.75,1.5,0.75,  0.25,1.5,0.75,
                   0.25,0,0.25,  0.25,1.5,0.25,  0.75,1.5,0.25,  0.75,0,0.25
                  };
    float color_stand[]={0.4,0.4,0.4,  0.4,0.4,0.4,  0.2,0.2,0.2,  0.2,0.2,0.2,
                         0.4,0.4,0.4,  0.2,0.2,0.2,  0.2,0.2,0.2,  0.4,0.4,0.4,
                         0.4,0.4,0.4,  0.4,0.4,0.4,  0.2,0.2,0.2,  0.2,0.2,0.2,
                         0.4,0.4,0.4,  0.2,0.2,0.2,  0.2,0.2,0.2,  0.4,0.4,0.4
                        };
    float tex_stand[]={0.504,0.574,  0.504,0.523,  0.664,0.523,  0.664,0.574,
                       0.504,0.523,  0.664,0.523,  0.664,0.574,  0.504,0.574,
                       0.504,0.574,  0.504,0.523,  0.664,0.523,  0.664,0.574,
                       0.504,0.523,  0.664,0.523,  0.664,0.574,  0.504,0.574
                      };

    float tube_closed[]={//Tube
                  -1,-1,-3,  -1,-1,3,  -1,1,3,  -1,1,-3,
                  1,-1,-3,  1,1,-3,  1,1,3,  1,-1,3, //Right
                  1,1,-3,  -1,1,-3,  -1,1,3,  1,1,3, //Top
                  1,-1,-3,  1,-1,3,  -1,-1,3,  -1,-1,-3,
                  -1,1,3,  -1,-1,3,  1,-1,3,  1,1,3, //Back
                  //Lid
                  1,-1,-3,  -1,-1,-3,  -1,1,-3,  1,1,-3,
                  //Fins
                  0,1,1,  0,1,3,  0,3,3,  0,2,1,
                  1,0,1,  1,0,3,  3,0,3,  2,0,1,
                  -1,0,1,  -1,0,3,  -3,0,3, -2,0,1,
                  //Rocket
                  -0.7,0.7,-1,  0.7,0.7,-1,  0.7,-0.7,-1,  -0.7,-0.7,-1,
                  -0.7,0.7,-1,  -0.7,-0.7,-1,  -0.7,-0.7,-2,  -0.7,0.7,-2,
                  -0.7,0.7,-1,  -0.7,0.7,-2,  0.7,0.7,-2,  0.7,0.7,-1,
                  0.7,0.7,-1,  0.7,0.7,-2,  0.7,-0.7,-2,  0.7,-0.7,-1,
                  -0.7,-0.7,-1,  0.7,-0.7,-1,  0.7,-0.7,-2,  -0.7,-0.7,-2
                 };
//0.921,0.738,  1,0.738,  1,0.824,  0.921,0.824,  tex hål
    float tex_tube[]={//Tube
                      0.504,0.414,  0.758,0.414,  0.758,0.523,  0.504,0.523,
                      0.504,0.523,  0.504,0.414,  0.758,0.414,  0.758,0.523,
                      0.504,0.523,  0.504,0.414,  0.758,0.414,  0.758,0.523,
                      0.504,0.414,  0.758,0.414,  0.758,0.523,  0.504,0.523,
                      0.761,0.531,  0.875,0.531,  0.875,0.645,  0.761,0.645,
                      //Lid
                      0.761,0.414,  0.875,0.414,  0.875,0.531,  0.761,0.531,
                      //Fins
                      0.668,0.527,  0.758,0.527,  0.758,0.645,  0.668,0.586,
                      0.668,0.527,  0.758,0.527,  0.758,0.645,  0.668,0.586,
                      0.668,0.527,  0.758,0.527,  0.758,0.645,  0.668,0.586,
                      //Rocket
                      0.117,0.414,  0.234,0.414,  0.234,0.531,  0.117,0.531,
                      0,0,  0.1,0,  0.1,0.1,  0,0.1,
                      0,0,  0.1,0,  0.1,0.1,  0,0.1,
                      0,0,  0.1,0,  0.1,0.1,  0,0.1,
                      0,0,  0.1,0,  0.1,0.1,  0,0.1
                     };

    float color_tube[]={0.2,0.2,0.2,  0.4,0.4,0.4,  0.4,0.4,0.4,  0.2,0.2,0.2,
                        0.2,0.2,0.2,  0.2,0.2,0.2,  0.4,0.4,0.4,  0.4,0.4,0.4,
                        0.2,0.2,0.2,  0.2,0.2,0.2,  0.4,0.4,0.4,  0.4,0.4,0.4,
                        0.2,0.2,0.2,  0.4,0.4,0.4,  0.4,0.4,0.4,  0.2,0.2,0.2,
                        0.4,0.4,0.4,  0.4,0.4,0.4,  0.4,0.4,0.4,  0.4,0.4,0.4,
                        //Lid
                        0.15,0.15,0.15,  0.15,0.15,0.15,  0.15,0.15,0.15,  0.15,0.15,0.15,
                        //Fins
                        0.4,0.4,0.4,  0.5,0.5,0.5,  0.5,0.5,0.5,  0.4,0.4,0.4,
                        0.4,0.4,0.4,  0.5,0.5,0.5,  0.5,0.5,0.5,  0.4,0.4,0.4,
                        0.4,0.4,0.4,  0.5,0.5,0.5,  0.5,0.5,0.5,  0.4,0.4,0.4,
                        //Rocket
                        0.8,0,0, 0.8,0,0.2, 0.8,0.2,0, 0.6,0.2,0,
                        0.8,0,0, 0.8,0,0.2, 0.8,0.2,0, 0.6,0.2,0,
                        0.8,0,0, 0.8,0,0.2, 0.8,0.2,0, 0.6,0.2,0,
                        0.8,0,0, 0.8,0,0.2, 0.8,0.2,0, 0.6,0.2,0,
                        0.8,0,0, 0.8,0,0.2, 0.8,0.2,0, 0.6,0.2,0
                       };

    glEnableClientState(GL_VERTEX_ARRAY);
    glEnableClientState(GL_TEXTURE_COORD_ARRAY);
    glEnableClientState(GL_COLOR_ARRAY);
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, m_playerSkin);
    glVertexPointer(3, GL_FLOAT, 0, body);
    if (m_team==0)
    {
        switch (m_playerID)
        {
            case 0:glColorPointer(3, GL_FLOAT, 0, color0);break;
            case 1:glColorPointer(3, GL_FLOAT, 0, color1);break;
            case 2:glColorPointer(3, GL_FLOAT, 0, color2);break;
            case 3:glColorPointer(3, GL_FLOAT, 0, color3);break;
            case 4:glColorPointer(3, GL_FLOAT, 0, color4);break;
            case 5:glColorPointer(3, GL_FLOAT, 0, color5);break;
            case 6:glColorPointer(3, GL_FLOAT, 0, color6);break;
            case 7:glColorPointer(3, GL_FLOAT, 0, color7);break;
        }
    }
    else
    {
        if (m_team==1) glColorPointer(3, GL_FLOAT, 0, color0);
        if (m_team==2) glColorPointer(3, GL_FLOAT, 0, color1);
    }
glPushMatrix();
    glTranslatef(0,-1.0-m_benbend,0);
    glTranslatef(m_xpos, m_ypos, m_zpos);
    if (m_inTransportType==2) glTranslatef(0,0.3,0); //In Speed
    glRotatef(m_ybodyhed-90,0,1,0);
    if (m_carries) glRotatef(-20,1,0,0);
    glScalef(0.3+0.2*m_size,0.3+0.2*m_size,0.3+0.2*m_size);
glPushMatrix();
        //Torso
        glScalef(1,1,0.8);
        glTexCoordPointer(2, GL_FLOAT, 0, tex_body);
        glDrawArrays(GL_QUADS, 0, 24);
glPopMatrix();
glPushMatrix();
        //Neck
        glTranslatef(0,1,0);
        glScalef(0.35,0.35,0.35);
        glTexCoordPointer(2, GL_FLOAT, 0, tex_neck);
        glDrawArrays(GL_QUADS, 0, 24);
        //Head
        if (!m_moving) glRotatef(m_yheadhed-m_ybodyhed,0,1,0);
        glRotatef(90-m_zhed,1,0,0);
        glScalef(1.8,1.65,1.4);
        glTranslatef(0,1.3,0);
        glTexCoordPointer(2, GL_FLOAT, 0, tex_head);
        glDrawArrays(GL_QUADS, 0, 24);
glPopMatrix();
glPushMatrix();
        if (m_carries) glRotatef(20,1,0,0);
        glScalef(0.45,1,0.45);
        glTranslatef(0,m_benbend,0);
        //Leg
glPushMatrix();
            glTranslatef(1.1,0,0);
            glTranslatef(0, m_ben-0.1, 0);
            glTexCoordPointer(2, GL_FLOAT, 0, tex_leg);
            glPushMatrix();
                glTranslatef(0,-0.6,0);
                glScalef(1,0.6,1);
                glDrawArrays(GL_QUADS, 0, 24);
            glPopMatrix();
            //Foot
            glTranslatef(0,-1.1,-0.3);
            glScalef(1.1,0.1,1.5);
            glTexCoordPointer(2, GL_FLOAT, 0, tex_foot);
            glDrawArrays(GL_QUADS, 0, 24);

glPopMatrix();
        //Leg 2
glPushMatrix();
            glTranslatef(-1.1,-2,0);
            if (m_jumpState==1) glTranslatef(0, m_ben-0.1+2, 0);
            else glTranslatef(0, 1-m_ben-0.1, 0);
            glTexCoordPointer(2, GL_FLOAT, 0, tex_leg);
            glPushMatrix();
                glTranslatef(0,-0.6,0);
                glScalef(1,0.6,1);
                glDrawArrays(GL_QUADS, 0, 24);
            glPopMatrix();
            //Foot 2
            glTranslatef(0,-1.1,-0.3);
            glScalef(1.1,0.1,1.5);
            glTexCoordPointer(2, GL_FLOAT, 0, tex_foot);
            glDrawArrays(GL_QUADS, 0, 24);
glPopMatrix();
glPopMatrix();
    //Weapon
glPushMatrix();
    glDisable(GL_CULL_FACE);
    glScalef(1.4,1.4,1.4);
    glTranslatef(-0.1,-1.0,-0.2);
    if (m_weaponSwapProg>0)
    {
        glRotatef(-90*m_weaponSwapProg,1,0,0);
        glTranslatef(0,-m_weaponSwapProg*0.5,m_weaponSwapProg*0.5);
    }
    if (m_inTransportType!=0) //In Transport
    {
        switch (m_inTransportType)
        {
            case 1:{//Heli
                    glVertexPointer(3, GL_FLOAT, 0, arm);
                    glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                    glTranslatef(0.8,1.5,0.1);
                    glRotatef(-90,1,0,0);
                    glScalef(1,1,0.5);
                    glDrawArrays(GL_QUADS, 0, 24);
                    glTranslatef(-1.7,0,0);
                    glDrawArrays(GL_QUADS, 0, 24);
                    glDisableClientState(GL_COLOR_ARRAY);
                   }break;
            case 2:{//Speed
                    glVertexPointer(3, GL_FLOAT, 0, arm);
                    glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                    glTranslatef(0.8,1.6,0.4);
                    glRotatef(-10,1,0,0);
                    glScalef(1,1,0.7);
                    glDrawArrays(GL_QUADS, 0, 24);
                    glTranslatef(-1.7,0,0);
                    glDrawArrays(GL_QUADS, 0, 24);
                    glDisableClientState(GL_COLOR_ARRAY);
                   }break;
            case 3:{//Tank

                   }break;
        }
    }
    else switch (m_currWeapon)
    {
        case 0: //Melee
                switch (m_inHands)
                {
                    case 0:{//Empty Hands
                            if (m_interactionProg>0)
                            {
                                glVertexPointer(3, GL_FLOAT, 0, arm);
                                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                                glTranslatef(0.8,1.5,0.1);
                                glPushMatrix();
                                    glTranslatef(0,0,-m_interactionProg);
                                    glScalef(1,1,0.6);
                                    glDrawArrays(GL_QUADS, 0, 24);
                                glPopMatrix();
                                glTranslatef(-1.7,0,0);
                                glRotatef(-80*m_arm2,1,0,0);
                                glScalef(1,1,0.6);
                                glDrawArrays(GL_QUADS, 0, 24);
                                glDisableClientState(GL_COLOR_ARRAY);
                            }
                            else
                            {
                                glVertexPointer(3, GL_FLOAT, 0, arm);
                                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                                glTranslatef(0.8,1.5,0.1);
                                glPushMatrix();
                                if (m_meleeAttackProg==0) glRotatef(-80*m_arm1,1,0,0);
                                else
                                {
                                    glRotatef(60,1,0,0);
                                    glRotatef(-80*(m_meleeAttackProg),1,0,0);
                                    glRotatef(40*(m_meleeAttackProg),0,1,0);
                                }
                                glScalef(1,1,0.6);
                                glDrawArrays(GL_QUADS, 0, 24);
                                glPopMatrix();
                                glTranslatef(-1.7,0,0);
                                glRotatef(-80*m_arm2,1,0,0);
                                glScalef(1,1,0.6);
                                glDrawArrays(GL_QUADS, 0, 24);
                                glDisableClientState(GL_COLOR_ARRAY);
                            }
                           }break;
                    case 1:{//Buildbox
                            glTranslatef(0.8,1.6,0.5);
                            glVertexPointer(3, GL_FLOAT, 0, arm);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(-1.7,0,0);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(0.3,-0.8,-2.4);
                            glDisableClientState(GL_COLOR_ARRAY);
                            glVertexPointer(3, GL_FLOAT, 0, block);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_block);
                            //glColorPointer(3, GL_FLOAT, 0, color_block);
                            glScalef(1.4,1.4,1.4);
                            glDrawArrays(GL_QUADS, 0, 24);
                           }break;
                    case 2:{//Buildblock
                            glTranslatef(0.8,1.6,0.5);
                            glVertexPointer(3, GL_FLOAT, 0, arm);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(-1.7,0,0);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(0.3,-0.8,-2.4);
                            glDisableClientState(GL_COLOR_ARRAY);
                            glVertexPointer(3, GL_FLOAT, 0, block);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_block);
                            //glColorPointer(3, GL_FLOAT, 0, color_block);
                            glScalef(1.4,1.4,1.4);
                            glDrawArrays(GL_QUADS, 0, 24);
                           }break;
                    case 4:{//Wall
                            glTranslatef(0.8,1.6,0.5);
                            glVertexPointer(3, GL_FLOAT, 0, arm);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(-1.7,0,0);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(0.3,-0.8,-2.4);
                            glDisableClientState(GL_COLOR_ARRAY);
                            glVertexPointer(3, GL_FLOAT, 0, block);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_block);
                            //glColorPointer(3, GL_FLOAT, 0, color_block);
                            glScalef(1.4,1.4,1.4);
                            glDrawArrays(GL_QUADS, 0, 24);
                           }break;
                    case 5:{//Terrain
                            glTranslatef(0.8,1.6,0.5);
                            glVertexPointer(3, GL_FLOAT, 0, arm);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(-1.7,0,0);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(0.3,-0.8,-2.4);
                            glDisableClientState(GL_COLOR_ARRAY);
                            glVertexPointer(3, GL_FLOAT, 0, block);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_block);
                            //glColorPointer(3, GL_FLOAT, 0, color_block);
                            glScalef(1.4,1.4,1.4);
                            glDrawArrays(GL_QUADS, 0, 24);
                           }break;
                    case 6:{//Mine
                            glTranslatef(0.8,1.6,0.5);
                            glVertexPointer(3, GL_FLOAT, 0, arm);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(-1.7,0,0);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(0.3,-0.8,-2.4);
                            glDisableClientState(GL_COLOR_ARRAY);
                            glVertexPointer(3, GL_FLOAT, 0, block);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_block);
                            //glColorPointer(3, GL_FLOAT, 0, color_block);
                            glScalef(1.4,1.4,1.4);
                            glDrawArrays(GL_QUADS, 0, 24);
                           }break;
                    case 7:{//Turret
                            glTranslatef(0.8,1.6,0.5);
                            glVertexPointer(3, GL_FLOAT, 0, arm);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(-1.7,0,0);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(0.3,-0.8,-2.4);
                            glDisableClientState(GL_COLOR_ARRAY);
                            glVertexPointer(3, GL_FLOAT, 0, block);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_block);
                            //glColorPointer(3, GL_FLOAT, 0, color_block);
                            glScalef(1.4,1.4,1.4);
                            glDrawArrays(GL_QUADS, 0, 24);
                           }break;
                    case 8:{//Outpost
                            glTranslatef(0.8,1.6,0.5);
                            glVertexPointer(3, GL_FLOAT, 0, arm);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(-1.7,0,0);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(0.3,-0.8,-2.4);
                            glDisableClientState(GL_COLOR_ARRAY);
                            glVertexPointer(3, GL_FLOAT, 0, block);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_block);
                            //glColorPointer(3, GL_FLOAT, 0, color_block);
                            glScalef(1.4,1.4,1.4);
                            glDrawArrays(GL_QUADS, 0, 24);
                           }break;
                }
                break;
        case 1: //Revolver
                glVertexPointer(3, GL_FLOAT, 0, arm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                glTranslatef(0.8,1.5,0.5+m_rifleAttackProg);
                glRotatef(90-m_zhed,1,0,0);
                glDrawArrays(GL_QUADS, 0, 24);
                glPushMatrix();
                glTranslatef(-1.7,0.1,-0.5-m_rifleAttackProg);
                glRotatef(-80*m_arm2,1,0,0);
                glScalef(1,1,0.6);
                glDrawArrays(GL_QUADS, 0, 24);
                glPopMatrix();
                glDisableClientState(GL_COLOR_ARRAY);
                glVertexPointer(3, GL_FLOAT, 0, rightArm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_rightArm);
                //glColorPointer(3, GL_FLOAT, 0, color_rightArm);
                glDrawArrays(GL_QUADS, 0, 16);
                break;
        case 2: //Uzi
                glTranslatef(0.8,1.5,0.5+m_rifleAttackProg);
                glVertexPointer(3, GL_FLOAT, 0, arm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                glRotatef(90-m_zhed,1,0,0);
                glDrawArrays(GL_QUADS, 0, 24);
                glTranslatef(-1.7,0,0);
                glDrawArrays(GL_QUADS, 0, 24);
                glTranslatef(1.7,0,0);
                glDisableClientState(GL_COLOR_ARRAY);
                glVertexPointer(3, GL_FLOAT, 0, rightArm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_rightArm);
                //glColorPointer(3, GL_FLOAT, 0, color_rightArm);
                glDrawArrays(GL_QUADS, 0, 36);
                glTranslatef(-1.7,0,0);
                glDrawArrays(GL_QUADS, 0, 36);
                break;
        case 3: //Sniper
                glTranslatef(0.8,1.5,0.5+m_rifleAttackProg);
                glVertexPointer(3, GL_FLOAT, 0, arm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                glRotatef(90-m_zhed,1,0,0);
                glDrawArrays(GL_QUADS, 0, 24);
                glPushMatrix();
                glTranslatef(-1.7,0.1,-0.5-m_rifleAttackProg);
                glRotatef(-80*m_arm2,1,0,0);
                glScalef(1,1,0.6);
                glDrawArrays(GL_QUADS, 0, 24);
                glPopMatrix();
                glDisableClientState(GL_COLOR_ARRAY);
                glVertexPointer(3, GL_FLOAT, 0, rightArm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_rightArm);
                //glColorPointer(3, GL_FLOAT, 0, color_rightArm);
                glDrawArrays(GL_QUADS, 0, 60);
                break;
        case 4: //RocketLauncher
                glPushMatrix();
                glTranslatef(0.6,1.3,0.5+m_rifleAttackProg*0.2);
                glRotatef(90,1,0,0);
                glRotatef(90-m_zhed,1,0,0);
                glVertexPointer(3, GL_FLOAT, 0, arm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                glDrawArrays(GL_QUADS, 0, 24);
                glTranslatef(-1.3,0,0);
                glDrawArrays(GL_QUADS, 0, 24);
                glPopMatrix();
                glRotatef(90-m_zhed,1,0,0);
                glTranslatef(-0.4,3.7,1.6+m_rifleAttackProg);
                glDisableClientState(GL_COLOR_ARRAY);
                glVertexPointer(3, GL_FLOAT, 0, cannon);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_cannon);
                //glColorPointer(3, GL_FLOAT, 0, color_cannon);
                glDrawArrays(GL_QUADS, 0, 40);
                break;
        case 5: //Radar
                glTranslatef(0.8,1.5,0.5);
                glVertexPointer(3, GL_FLOAT, 0, arm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                glDrawArrays(GL_QUADS, 0, 24);
                glTranslatef(-1.7,0,0);
                glDrawArrays(GL_QUADS, 0, 24);
                glDisableClientState(GL_COLOR_ARRAY);
                glVertexPointer(3, GL_FLOAT, 0, radar);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_radar);
                //glColorPointer(3, GL_FLOAT, 0, color_radar);
                glTranslatef(1.69,-0.5,-1.6);
                glScalef(0.69,0.69,0.69);
                glRotatef(-30,1,0,0);
                glDrawArrays(GL_QUADS, 0, 36);
                drawRadar(0);
                break;
     /*   case 6: //Mine
                glTranslatef(0.7,1.6-m_rifleAttackProg,0.7);
                glVertexPointer(3, GL_FLOAT, 0, arm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                glDrawArrays(GL_QUADS, 0, 24);
                glTranslatef(-1.5,0,0);
                glDrawArrays(GL_QUADS, 0, 24);
                glTranslatef(0.3,-1.2,-2.0);
                glDisableClientState(GL_COLOR_ARRAY);
                glVertexPointer(3, GL_FLOAT, 0, block);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_block_mine);
                //glColorPointer(3, GL_FLOAT, 0, color_block_mine);
                glRotatef(10,1,0,0);
                glScalef(1.2,1.35,0.3);
                glDrawArrays(GL_QUADS, 0, 24);
                break;
        case 7: //Turret
                glTranslatef(0.7,1.6-m_rifleAttackProg,0.5);
                glVertexPointer(3, GL_FLOAT, 0, arm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                glRotatef(11,0,1,0);
                glDrawArrays(GL_QUADS, 0, 24);
                glRotatef(-11,0,1,0);
                glTranslatef(-1.5,0,0);
                glDrawArrays(GL_QUADS, 0, 24);
                glTranslatef(0.3,-0.8,-2.0);
                glDisableClientState(GL_COLOR_ARRAY);
                glVertexPointer(3, GL_FLOAT, 0, stand);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_stand);
                //glColorPointer(3, GL_FLOAT, 0, color_stand);
                glRotatef(20,0,0,1);
                glScalef(1.2,1.2,1.2);
                glDrawArrays(GL_QUADS, 0, 16);
                glVertexPointer(3, GL_FLOAT, 0, tube_closed);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_tube);
                //glColorPointer(3, GL_FLOAT, 0, color_tube);
                glTranslatef(0.5,1.8,0.5);
                glScalef(0.45,0.45,0.45);
                glDrawArrays(GL_QUADS, 0, 56);
                break;*/
    }
    glEnable(GL_CULL_FACE);

glPopMatrix();
glPopMatrix();
    glDisableClientState(GL_VERTEX_ARRAY);
    glDisableClientState(GL_COLOR_ARRAY);
    glDisableClientState(GL_TEXTURE_COORD_ARRAY);
    glDisable(GL_TEXTURE_2D);

/*    //hitbox
    float hitbox=1;
    m_ypos-=1;
    glBegin(GL_LINE_STRIP);  //y-led
    glVertex3f(m_xpos+hitbox,m_ypos,m_zpos+hitbox);
    glVertex3f(m_xpos+hitbox,m_ypos,m_zpos-hitbox);
    glVertex3f(m_xpos-hitbox,m_ypos,m_zpos-hitbox);
    glVertex3f(m_xpos-hitbox,m_ypos,m_zpos+hitbox);
    glVertex3f(m_xpos+hitbox,m_ypos,m_zpos+hitbox);
    glEnd();
    glBegin(GL_LINE_STRIP);  //z-led
    glVertex3f(m_xpos+hitbox,m_ypos+hitbox,m_zpos);
    glVertex3f(m_xpos+hitbox,m_ypos-hitbox,m_zpos);
    glVertex3f(m_xpos-hitbox,m_ypos-hitbox,m_zpos);
    glVertex3f(m_xpos-hitbox,m_ypos+hitbox,m_zpos);
    glVertex3f(m_xpos+hitbox,m_ypos+hitbox,m_zpos);
    glEnd();
    glBegin(GL_LINE_STRIP);  //x-led
    glVertex3f(m_xpos,m_ypos+hitbox,m_zpos+hitbox);
    glVertex3f(m_xpos,m_ypos-hitbox,m_zpos+hitbox);
    glVertex3f(m_xpos,m_ypos-hitbox,m_zpos-hitbox);
    glVertex3f(m_xpos,m_ypos+hitbox,m_zpos-hitbox);
    glVertex3f(m_xpos,m_ypos+hitbox,m_zpos+hitbox);
    glEnd();
    m_ypos+=1;*/
}

void unit::drawFPSview(bool seeUnit, bool seeSpawner)
{
    if (m_yheadhed>m_ybodyhed+20) m_ybodyhed+=5;
    if (m_yheadhed<m_ybodyhed-20) m_ybodyhed-=5;
    if (m_yheadhed>m_ybodyhed+2) m_ybodyhed+=1;
    if (m_yheadhed<m_ybodyhed-2) m_ybodyhed-=1;
    if (!m_spawnerOnline) return;
    if (m_spawnerMoving && m_spawning) return;

    float color0[]={0.3,0.3,0.7, 0.3,0.3,0.7, 0.5,0.5,0.9, 0.5,0.5,0.9,
                    0.3,0.3,0.7, 0.3,0.3,0.7, 0.5,0.5,0.9, 0.5,0.5,0.9,
                    0.3,0.3,0.7, 0.3,0.3,0.7, 0.5,0.5,0.9, 0.5,0.5,0.9,
                    0.3,0.3,0.7, 0.3,0.3,0.7, 0.5,0.5,0.9, 0.5,0.5,0.9,
                    0.3,0.3,0.7, 0.3,0.3,0.7, 0.3,0.3,0.7, 0.3,0.3,0.7,
                    0.5,0.5,0.9, 0.5,0.5,0.9, 0.5,0.5,0.9, 0.5,0.5,0.9
                    };
    float color1[]={0.3,0.7,0.3, 0.3,0.7,0.3, 0.5,0.9,0.5, 0.5,0.9,0.5,
                    0.3,0.7,0.3, 0.3,0.7,0.3, 0.5,0.9,0.5, 0.5,0.9,0.5,
                    0.3,0.7,0.3, 0.3,0.7,0.3, 0.5,0.9,0.5, 0.5,0.9,0.5,
                    0.3,0.7,0.3, 0.3,0.7,0.3, 0.5,0.9,0.5, 0.5,0.9,0.5,
                    0.3,0.7,0.3, 0.3,0.7,0.3, 0.3,0.7,0.3, 0.3,0.7,0.3,
                    0.5,0.9,0.5, 0.5,0.9,0.5, 0.5,0.9,0.5, 0.5,0.9,0.5
                    };
    float color2[]={0.7,0.3,0.3, 0.7,0.3,0.3, 0.9,0.5,0.5, 0.9,0.5,0.5,
                    0.7,0.3,0.3, 0.7,0.3,0.3, 0.9,0.5,0.5, 0.9,0.5,0.5,
                    0.7,0.3,0.3, 0.7,0.3,0.3, 0.9,0.5,0.5, 0.9,0.5,0.5,
                    0.7,0.3,0.3, 0.7,0.3,0.3, 0.9,0.5,0.5, 0.9,0.5,0.5,
                    0.7,0.3,0.3, 0.7,0.3,0.3, 0.7,0.3,0.3, 0.7,0.3,0.3,
                    0.9,0.5,0.5, 0.9,0.5,0.5, 0.9,0.5,0.5, 0.9,0.5,0.5
                    };
    float color3[]={0.7,0.1,0.7, 0.8,0.0,0.6, 0.9,0.1,0.9, 0.8,0.4,0.8,
                    0.8,0.0,0.6, 0.5,0.2,0.5, 0.6,0.1,0.5, 0.9,0.1,0.9,
                    0.5,0.2,0.5, 0.6,0.1,0.4, 0.7,0.0,0.6, 0.6,0.1,0.5,
                    0.6,0.1,0.4, 0.7,0.1,0.7, 0.8,0.4,0.8, 0.7,0.0,0.6,
                    0.6,0.1,0.4, 0.5,0.2,0.5, 0.8,0.0,0.6, 0.7,0.1,0.7,
                    0.8,0.4,0.8, 0.9,0.1,0.9, 0.6,0.1,0.5, 0.7,0.0,0.6};
    float color4[]={0.4,0.3,0.3, 0.5,0.4,0.4, 0.4,0.4,0.5, 0.4,0.5,0.3,
                    0.5,0.4,0.4, 0.2,0.3,0.3, 0.1,0.2,0.3, 0.4,0.4,0.5,
                    0.2,0.3,0.3, 0.1,0.2,0.3, 0.3,0.3,0.3, 0.1,0.2,0.3,
                    0.1,0.2,0.3, 0.4,0.3,0.3, 0.4,0.5,0.3, 0.3,0.3,0.3,
                    0.1,0.2,0.3, 0.2,0.3,0.3 ,0.5,0.4,0.4, 0.4,0.3,0.3,
                    0.4,0.5,0.3, 0.4,0.4,0.5, 0.1,0.2,0.3, 0.3,0.3,0.3};
    float color5[]={0.8,0.4,0.3, 0.8,0.3,0.1, 0.9,0.5,0.1, 0.9,0.4,0.0,
                    0.8,0.3,0.1, 0.6,0.3,0.0, 0.7,0.3,0.0, 0.9,0.5,0.1,
                    0.6,0.3,0.0, 0.5,0.2,0.1, 0.5,0.3,0.0, 0.7,0.3,0.0,
                    0.5,0.2,0.1, 0.8,0.4,0.3, 0.9,0.4,0.0, 0.5,0.3,0.0,
                    0.5,0.2,0.1, 0.6,0.3,0.0, 0.8,0.3,0.1, 0.8,0.4,0.3,
                    0.9,0.4,0.0, 0.9,0.5,0.1, 0.7,0.3,0.0, 0.5,0.3,0.0};
    float color6[]={0.2,0.8,0.8, 0.3,0.7,0.6, 0.2,0.6,0.7, 0.3,0.6,0.8,
                    0.3,0.7,0.6, 0.0,0.5,0.5, 0.1,0.3,0.4, 0.2,0.6,0.7,
                    0.0,0.5,0.5, 0.1,0.4,0.5, 0.0,0.6,0.5, 0.1,0.3,0.4,
                    0.1,0.4,0.5, 0.2,0.8,0.8, 0.3,0.6,0.8, 0.0,0.6,0.5,
                    0.1,0.4,0.5, 0.0,0.5,0.5, 0.3,0.7,0.6, 0.2,0.8,0.8,
                    0.3,0.6,0.8, 0.2,0.6,0.7, 0.1,0.3,0.4, 0.0,0.6,0.5};
    float color7[]={0.9,0.8,0.8, 0.8,0.9,0.9, 0.8,0.8,0.8, 0.7,0.8,0.9,
                    0.8,0.9,0.9, 0.5,0.5,0.5, 0.5,0.3,0.4, 0.8,0.8,0.8,
                    0.5,0.5,0.5, 0.4,0.4,0.5, 0.6,0.6,0.5, 0.5,0.3,0.4,
                    0.4,0.4,0.5, 0.9,0.8,0.8, 0.7,0.8,0.9, 0.6,0.6,0.5,
                    0.4,0.4,0.5, 0.5,0.5,0.5, 0.8,0.9,0.9, 0.9,0.8,0.8,
                    0.7,0.8,0.9, 0.8,0.8,0.8, 0.5,0.3,0.4, 0.6,0.6,0.5};

    float arm[]={   0,0,0,  0,0,-2,  0,-0.3,-2,  0,-0.3,0,
                    0.3,0,0,  0.3,0,-2,  0,0,-2, 0,0,0,
                    0.3,0,0,  0.3,-0.3,0,  0.3,-0.3,-2, 0.3,0,-2,
                    0.3,-0.3,0,  0,-0.3,0,  0,-0.3,-2,  0.3,-0.3,-2,
                    0,0,0,  0,-0.3,0,  0.3,-0.3,0,  0.3,0,0,
                    0,0,-2,  0.3,0,-2,  0.3,-0.3,-2,  0,-0.3,-2
                    };
    float tex_arm[]={0.742,0.883,  0.742,0.648,  0.840,0.648,  0.840,0.883,
                     0.742,0.883,  0.742,0.648,  0.840,0.648,  0.840,0.883,
                     0.840,0.883,  0.742,0.883,  0.742,0.648,  0.840,0.648,
                     0.742,0.883,  0.742,0.648,  0.840,0.648,  0.840,0.883,
                     0.742,0.883,  0.840,0.883,  0.840,1,  0.742,1,
                     0.742,0.883,  0.840,0.883,  0.840,1,  0.742,1,
                    };
                            //Arm
    float color_rightArm[]={/*0,0,0, 0,0,0, 0,0,0, 0,0,0,
                            0,0,0, 0,0,0, 0,0,0, 0,0,0,
                            0,0,0, 0,0,0, 0,0,0, 0,0,0,
                            0,0,0, 0,0,0, 0,0,0, 0,0,0,
                            0,0,0, 0,0,0, 0,0,0, 0,0,0,
                            0,0,0, 0,0,0, 0,0,0, 0,0,0,*/
                            //Rifle
                            0.4,0.4,0.4, 0.1,0.1,0.1, 0.1,0.1,0.1, 0.4,0.4,0.4,
                            0.4,0.4,0.4, 0.4,0.4,0.4, 0.1,0.1,0.1, 0.1,0.1,0.1,
                            0.4,0.4,0.4, 0.4,0.4,0.4, 0.1,0.1,0.1, 0.1,0.1,0.1,
                            0.4,0.4,0.4, 0.1,0.1,0.1, 0.1,0.1,0.1, 0.4,0.4,0.4,
                            //Magasin
                            0.1,0.1,0.1, 0.1,0.1,0.1, 0.2,0.2,0.2, 0.2,0.2,0.2,
                            0.1,0.1,0.1, 0.2,0.2,0.2, 0.2,0.2,0.2, 0.1,0.1,0.1,
                            0.2,0.2,0.2, 0.2,0.2,0.2, 0.2,0.2,0.2, 0.2,0.2,0.2,
                            0.1,0.1,0.1, 0.2,0.2,0.2, 0.2,0.2,0.2, 0.1,0.1,0.1,
                            0.1,0.1,0.1, 0.1,0.1,0.1, 0.2,0.2,0.2, 0.2,0.2,0.2,
                            //Scope
                            0.3,0.3,0.3, 0.2,0.2,0.2, 0.1,0.1,0.1, 0.2,0.2,0.2,
                            0.3,0.3,0.3, 0.2,0.2,0.2, 0.2,0.2,0.2, 0.3,0.3,0.3,
                            0.3,0.3,0.3, 0.2,0.2,0.2, 0.1,0.1,0.1, 0.2,0.2,0.2,
                            0.2,0.2,0.2, 0.2,0.2,0.2, 0.1,0.1,0.1, 0.1,0.1,0.1,

                            0.2,0.2,0.2, 0.2,0.2,0.2, 0.1,0.1,0.1, 0.1,0.1,0.1,

                            0.2,0.2,0.2, 0.2,0.2,0.2, 0.1,0.1,0.1, 0.1,0.1,0.1
                            };

    float rightArm[]={
                    //Arm
/*                    0,0,0,  0,0,-2,  0,-0.3,-2,  0,-0.3,0,
                    0.3,0,0,  0.3,0,-2,  0,0,-2, 0,0,0,
                    0.3,0,0,  0.3,-0.3,0,  0.3,-0.3,-2, 0.3,0,-2,
                    0.3,-0.3,0,  0,-0.3,0,  0,-0.3,-2,  0.3,-0.3,-2,
                    0,0,0,  0,-0.3,0,  0.3,-0.3,0,  0.3,0,0,
                    0,0,-2,  0.3,0,-2,  0.3,-0.3,-2,  0,-0.3,-2,
*/                    //Rifle
                    0.1,-0.1,-2,  0.1,-0.1,-2.9,  0.1,-0.2,-2.9,  0.1,-0.2,-2,
                    0.2,-0.1,-2,  0.1,-0.1,-2,  0.1,-0.1,-2.9,  0.2,-0.1,-2.9,
                    0.2,-0.1,-2,  0.2,-0.2,-2,  0.2,-0.2,-2.9, 0.2,-0.1,-2.9,
                    0.2,-0.2,-2,  0.2,-0.2,-2.9,  0.1,-0.2,-2.9,  0.1,-0.2,-2,
                    //Magasin
                    0.1,-0.3,-1.5,  0.1,-0.3,-1.8,  0.1,-0.7,-1.8,  0.1,-0.7,-1.5,
                    0.2,-0.3,-1.5,  0.2,-0.7,-1.5,  0.2,-0.7,-1.8,  0.2,-0.3,-1.8,
                    0.1,-0.7,-1.5,  0.1,-0.7,-1.8,  0.2,-0.7,-1.8,  0.2,-0.7,-1.5,
                    0.1,-0.3,-1.5,  0.1,-0.7,-1.5,  0.2,-0.7,-1.5,  0.2,-0.3,-1.5,
                    0.1,-0.3,-1.8,  0.2,-0.3,-1.8,  0.2,-0.7,-1.8,  0.1,-0.7,-1.8,
                    //Scope
                    0.05,0.4,-1,  0.05,0.4,-1.9,  0.05,0.2,-1.9,  0.05,0.2,-1,
                    0.25,0.4,-1,  0.25,0.4,-1.9,  0.05,0.4,-1.9,  0.05,0.4,-1,
                    0.25,0.4,-1,  0.25,0.2,-1,  0.25,0.2,-1.9,  0.25,0.4,-1.9,
                    0.25,0.2,-1,  0.05,0.2,-1,  0.05,0.2,-1.9,  0.25,0.2,-1.9,

                    0.15,0,-1.6,  0.15,0,-1.7,  0.15,0.2,-1.7,  0.15,0.2,-1.6,

                    0.15,0,-1.2,  0.15,0,-1.3,  0.15,0.2,-1.3,  0.15,0.2,-1.2
                  };
    float tex_rightArm[]={//Barrel
                          0.742,0.883,  0.742,1,  0.703,1, 0.703,0.883,
                          0.742,0.883,  0.703,0.883,  0.703,1,  0.742,1,
                          0.703,0.883,  0.742,0.883,  0.742,1,  0.703,1,
                          0.703,0.883,  0.703,1, 0.742,1,  0.742,0.883,
                          //Magasin
                          0.918,1,  0.840,1,  0.840,0.883,  0.918,0.883,
                          0.918,0.883,  0.918,1,  0.840,1,  0.840,0.883,
                          0.957,1, 0.957,0.883,  1,0.883,  1,1,
                          0.918,1,  0.918,0.883,  0.957,0.883, 0.957,1,
                          0.918,0.883,  0.957,0.883, 0.957,1,  0.918,1,
                          //Scope
                          0.840,0.883,  0.840,0.738,  0.918,0.738,  0.918,0.883,
                          0.840,0.883,  0.840,0.738,  0.918,0.738,  0.918,0.883,
                          0.840,0.738,  0.918,0.738,  0.918,0.883,  0.840,0.883,
                          0.840,0.738,  0.918,0.738,  0.918,0.883,  0.840,0.883,
                          //Stand
                          0.918,0.828,  1,0.828,  1,0.883,  0.918,0.883,
                          0.918,0.828,  1,0.828,  1,0.883,  0.918,0.883
                         };

    float leftArm[]={
                    //Arm
                    0,0,0,  0,0,-1.5,  0,-0.3,-1.5,  0,-0.3,0,
                    0.3,0,0,  0,0,0,  0,0,-1.5,  0.3,0,-1.5,
                    0.3,0,0,  0.3,-0.3,0,  0.3,-0.3,-1.5, 0.3,0,-1.5,
                    0.3,-0.3,0,  0.3,-0.3,-1.5,  0,-0.3,-1.5,  0,-0.3,0,
                    0,0,0,  0,-0.3,0,  0.3,-0.3,0,  0.3,0,0,
                    0,0,-1.5,  0.3,0,-1.5,  0.3,-0.3,-1.5,  0,-0.3,-1.5,
                    //Front
                    0,0,-1.5,  -0.2,0.2,-1.8,  -0.2,-0.5,-1.8,  0,-0.3,-1.5,
                    0.3,0,-1.5,  0.5,0.2,-1.8,  -0.2,0.2,-1.8,  0,0,-1.5,
                    0.3,0,-1.5,  0.3,-0.3,-1.5, 0.5,-0.5,-1.8,  0.5,0.2,-1.8,
                    0.3,-0.3,-1.5,  0,-0.3,-1.5, -0.2,-0.5,-1.8,  0.5,-0.5,-1.8
                  };
    float dubbleArm[]={
/*                    0,0,0,  0,0,-2.5,  0,-1,-2.5,  0,-1,0,
                    1,0,0,  1,0,-2.5,  0,0,-2.5,  0,0,0,
                    1,0,0,  1,-1,0,  1,-1,-2.5, 1,0,-2.5,
                    1,-1,0,  0,-1,0,  0,-1,-2.5,  1,-1,-2.5,
                    0,0,0,  0,-1,0,  1,-1,0,  1,0,0,

                    0.1,-0.1,-2.3,  -0.1,0.1,-2.7,  -0.1,-1.1,-2.7,  0.1,-0.9,-2.3,
                    0.1,-0.1,-2.3,  0.9,-0.1,-2.3,  1.1,0.1,-2.7,  -0.1,0.1,-2.7,
                    0.9,-0.9,-2.3,  0.9,-0.1,-2.3,  1.1,0.1,-2.7,  1.1,-1.1,-2.7,
                    0.9,-0.9,-2.3,  0.1,-0.9,-2.3,  -0.1,-1.1,-2.7,  1.1,-1.1,-2.7,
                    0.1,-0.1,-2.3,  0.9,-0.1,-2.3,  0.9,-0.9,-2.3,  0.1,-0.9,-2.3,
*/
                    0,-0.2,-1.7,  -0.3,-0.2,-1.7,  -0.3,-2.5,-1.0,  0,-2.5,-1.0,
                    0,-0.3,-2.1,  0,-0.2,-1.7,  0,-2.5,-1.0,  0,-2.6,-1.4,

                    1.3,-0.2,-1.7,  1,-0.2,-1.7,  1,-2.5,-1.0,  1.3,-2.5,-1.0,
                    1,-0.3,-2.1,  1,-2.6,-1.4,  1,-2.5,-1.0,  1,-0.2,-1.7};
    float tex_dubbleArm[]={0.742,0.648,  0.840,0.648,   0.840,0.883,  0.742,0.883,
                           0.742,0.648,  0.840,0.648,   0.840,0.883,  0.742,0.883,

                           0.742,0.648,  0.840,0.648,   0.840,0.883,  0.742,0.883,
                           0.840,0.648,  0.840,0.883,  0.742,0.883,  0.742,0.648
                          };


    float cannon[]={0,0,0,  0,0,-2.5,  0,-1,-2.5,  0,-1,0,
                    1,0,0,  1,0,-2.5,  0,0,-2.5,  0,0,0,
                    1,0,0,  1,-1,0,  1,-1,-2.5, 1,0,-2.5,
                    1,-1,0,  0,-1,0,  0,-1,-2.5,  1,-1,-2.5,
                    0,0,0,  0,-1,0,  1,-1,0,  1,0,0,

                    0.1,-0.1,-2.3,  -0.1,0.1,-2.7,  -0.1,-1.1,-2.7,  0.1,-0.9,-2.3,
                    0.1,-0.1,-2.3,  0.9,-0.1,-2.3,  1.1,0.1,-2.7,  -0.1,0.1,-2.7,
                    0.9,-0.9,-2.3,  0.9,-0.1,-2.3,  1.1,0.1,-2.7,  1.1,-1.1,-2.7,
                    0.9,-0.9,-2.3,  0.1,-0.9,-2.3,  -0.1,-1.1,-2.7,  1.1,-1.1,-2.7,
                    0.1,-0.1,-2.3,  0.9,-0.1,-2.3,  0.9,-0.9,-2.3,  0.1,-0.9,-2.3};

    float tex_cannon[]={0.117,0.414,  0.117,0.643,  0,0.643,  0,0.414,
                        0.117,0.414,  0.117,0.643,  0,0.643,  0,0.414,
                        0,0.414,  0.117,0.414,  0.117,0.643,  0,0.643,
                        0,0.414,  0.117,0.414,  0.117,0.643,  0,0.643,
                        0.117,0.531,  0.234,0.531,  0.234,0.648,  0.117,0.648,

                        0.842,0.648,  0.842,0.734,  1,0.734,  1,0.648,
                        1,0.648,  0.842,0.648,  0.842,0.734,  1,0.734,
                        0.842,0.648,  1,0.648,  1,0.734,  0.842,0.734,
                        1,0.648,  0.842,0.648,  0.842,0.734,  1,0.734,
                        0.117,0.414,  0.234,0.414,  0.234,0.531,  0.117,0.531,
                       };

    float color_cannon[]={
                             0.3,0.3,0.3, 0.2,0.2,0.2, 0.2,0.2,0.2, 0.3,0.3,0.3,
                             0.3,0.3,0.3, 0.2,0.2,0.2, 0.2,0.2,0.2, 0.3,0.3,0.3,
                             0.3,0.3,0.3, 0.3,0.3,0.3, 0.2,0.2,0.2, 0.2,0.2,0.2,
                             0.3,0.3,0.3, 0.3,0.3,0.3, 0.2,0.2,0.2, 0.2,0.2,0.2,
                             0.3,0.3,0.3, 0.3,0.3,0.3, 0.3,0.3,0.3, 0.3,0.3,0.3,

                             0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1,
                             0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1,
                             0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1,
                             0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1,
                             0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1, 0.1,0.1,0.1
                         };
    float radar[]={ //Bottom
                    0,0,0,  -2,0,0,  -2,1,0,  0,1,0,
                    //Sides
                    0,0,0,  0,0,0.2,  0,1,0.2,  0,1,0,
                    -2,0,0,  -2,1,0,  -2,1,0.2,  -2,0,0.2,
                    0,0,0,  0,0,0.2,  -2,0,0.2,  -2,0,0,
                    0,1,0,  -2,1,0,  -2,1,0.2,  0,1,0.2,
                    //Frame
                    0,0,0.2,  0,1,0.2,  -0.1,0.9,0.2,  -0.1,0.1,0.2,
                    0,1,0.2,  -2,1,0.2,  -1.9,0.9,0.2,  -0.1,0.9,0.2,
                    -2,1,0.2,  -2,0,0.2,  -1.9,0.1,0.2,  -1.9,0.9,0.2,
                    -2,0,0.2,  0,0,0.2,  -0.1,0.1,0.2,  -1.9,0.1,0.2
                    };
    float tex_radar[]={//Bottom
                       0.344,0.539,  0.500,0.539,  0.500,0.645,  0.344,0.645,
                       //Sides
                       0.234,0.414,  0.285,0.414,  0.285,0.645,  0.234,0.645,
                       0.234,0.645,  0.234,0.414,  0.285,0.414,  0.285,0.645,
                       0.234,0.414,  0.285,0.414,  0.285,0.645,  0.234,0.645,
                       0.234,0.645,  0.234,0.414,  0.285,0.414,  0.285,0.645,
                       //Frame
                       0.285,0.645,  0.285,0.414,  0.340,0.414,  0.340,0.645,
                       0.285,0.645,  0.285,0.414,  0.340,0.414,  0.340,0.645,
                       0.285,0.645,  0.285,0.414,  0.340,0.414,  0.340,0.645,
                       0.285,0.645,  0.285,0.414,  0.340,0.414,  0.340,0.645
                      };
    float color_radar[]={ //Bottom
                          0.1,0.1,0.1,  0.1,0.1,0.1,  0.2,0.2,0.2,  0.2,0.2,0.2,
                          //Sides
                          0.1,0.1,0.1,  0.1,0.1,0.1,  0.3,0.3,0.3,  0.3,0.3,0.3,
                          0.1,0.1,0.1,  0.3,0.3,0.3,  0.3,0.3,0.3,  0.1,0.1,0.1,
                          0.1,0.1,0.1,  0.1,0.1,0.1,  0.1,0.1,0.1,  0.1,0.1,0.1,
                          0.3,0.3,0.3,  0.3,0.3,0.3,  0.3,0.3,0.3,  0.3,0.3,0.3,
                          //Frame
                          0.3,0.3,0.3,  0.3,0.3,0.3,  0.1,0.1,0.1,  0.1,0.1,0.1,
                          0.3,0.3,0.3,  0.3,0.3,0.3,  0.1,0.1,0.1,  0.1,0.1,0.1,
                          0.3,0.3,0.3,  0.3,0.3,0.3,  0.1,0.1,0.1,  0.1,0.1,0.1,
                          0.3,0.3,0.3,  0.3,0.3,0.3,  0.1,0.1,0.1,  0.1,0.1,0.1,
                        };
    float block[]={0,0,0, 0,1,0, 1,1,0, 1,0,0,
                   0,0,1, 0,1,1, 1,1,1, 1,0,1,
                   0,0,0, 0,0,1, 0,1,1, 0,1,0,
                   1,0,0, 1,1,0, 1,1,1, 1,0,1,
                   0,0,0, 0,0,1, 1,0,1, 1,0,0,
                   0,1,0, 1,1,0, 1,1,1, 0,1,1
                  };
    float tex_block[]={0.879,0.527,  1,0.527,  1,0.645,  0.879,0.645,
                       0.879,0.527,  1,0.527,  1,0.645,  0.879,0.645,
                       0.879,0.527,  1,0.527,  1,0.645,  0.879,0.645,
                       0.879,0.527,  1,0.527,  1,0.645,  0.879,0.645,
                       0.879,0.527,  0.879,0.645,  1,0.645,  1,0.527,
                       0.879,0.527,  0.879,0.645,  1,0.645,  1,0.527
                      };
    float tex_block_mine[]={0.344,0.414,  0.465,0.414,  0.465,0.535,  0.344,0.535,
                            0.344,0.414,  0.465,0.414,  0.465,0.535,  0.344,0.535,
                            0.465,0.414,  0.500,0.414,  0.500,0.535,  0.465,0.535,
                            0.465,0.535,  0.465,0.414,  0.500,0.414,  0.500,0.535,
                            0.465,0.535,  0.500,0.535,  0.500,0.414,  0.465,0.414,
                            0.465,0.414,  0.465,0.535,  0.500,0.535,  0.500,0.414
                           };

    float color_block[]={0.85,0.8,0.6, 0.95,0.9,0.7, 0.95,0.9,0.7, 0.85,0.8,0.6,
                         0.85,0.8,0.6, 0.95,0.9,0.7, 0.99,0.99,0.8, 0.85,0.8,0.6,
                         0.85,0.8,0.6, 0.85,0.8,0.6, 0.95,0.9,0.7, 0.95,0.9,0.7,
                         0.85,0.8,0.6, 0.95,0.9,0.7, 0.99,0.99,0.8, 0.85,0.8,0.6,
                         0.85,0.8,0.6, 0.85,0.8,0.6, 0.85,0.8,0.6, 0.85,0.8,0.6,
                         0.95,0.9,0.7, 0.95,0.9,0.7, 0.99,0.99,0.8, 0.95,0.9,0.7};

    float color_block_mine[]={
                         0.6,0.6,0.3,  0.8,0.8,0.4,  0.8,0.8,0.4,  0.8,0.8,0.4,
                         0.6,0.6,0.3,  0.8,0.8,0.4,  0.6,0.6,0.3,  0.8,0.8,0.4,
                         0.8,0.8,0.4,  0.8,0.8,0.4,  0.8,0.8,0.4,  0.6,0.6,0.3,
                         0.8,0.8,0.4,  0.8,0.8,0.4,  0.6,0.6,0.3,  0.8,0.8,0.4,
                         0.8,0.8,0.4,  0.6,0.6,0.3,  0.8,0.8,0.4,  0.8,0.8,0.4,
                         0.8,0.8,0.4,  0.8,0.8,0.4,  0.6,0.6,0.3,  0.8,0.8,0.4};

    float stand[]={0.25,0,0.25,  0.25,0,0.75,  0.25,1.5,0.75,  0.25,1.5,0.25,
                   0.75,0,0.25,  0.75,1.5,0.25,  0.75,1.5,0.75,  0.75,0,0.75,
                   0.25,0,0.75,  0.75,0,0.75,  0.75,1.5,0.75,  0.25,1.5,0.75,
                   0.25,0,0.25,  0.25,1.5,0.25,  0.75,1.5,0.25,  0.75,0,0.25,
                  };
    float tex_stand[]={0.504,0.574,  0.504,0.523,  0.664,0.523,  0.664,0.574,
                       0.504,0.523,  0.664,0.523,  0.664,0.574,  0.504,0.574,
                       0.504,0.574,  0.504,0.523,  0.664,0.523,  0.664,0.574,
                       0.504,0.523,  0.664,0.523,  0.664,0.574,  0.504,0.574
                      };
    float color_stand[]={0.4,0.4,0.4,  0.4,0.4,0.4,  0.2,0.2,0.2,  0.2,0.2,0.2,
                         0.4,0.4,0.4,  0.2,0.2,0.2,  0.2,0.2,0.2,  0.4,0.4,0.4,
                         0.4,0.4,0.4,  0.4,0.4,0.4,  0.2,0.2,0.2,  0.2,0.2,0.2,
                         0.4,0.4,0.4,  0.2,0.2,0.2,  0.2,0.2,0.2,  0.4,0.4,0.4,
                        };

    glEnableClientState(GL_VERTEX_ARRAY);
    glEnableClientState(GL_COLOR_ARRAY);
    glEnableClientState(GL_TEXTURE_COORD_ARRAY);
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, m_playerSkin);

    if (m_team==0)
    {
        switch (m_playerID)
        {
            case 0:glColorPointer(3, GL_FLOAT, 0, color0);break;
            case 1:glColorPointer(3, GL_FLOAT, 0, color1);break;
            case 2:glColorPointer(3, GL_FLOAT, 0, color2);break;
            case 3:glColorPointer(3, GL_FLOAT, 0, color3);break;
            case 4:glColorPointer(3, GL_FLOAT, 0, color4);break;
            case 5:glColorPointer(3, GL_FLOAT, 0, color5);break;
            case 6:glColorPointer(3, GL_FLOAT, 0, color6);break;
            case 7:glColorPointer(3, GL_FLOAT, 0, color7);break;
        }
    }
    else
    {
        if (m_team==1) glColorPointer(3, GL_FLOAT, 0, color0);
        if (m_team==2) glColorPointer(3, GL_FLOAT, 0, color1);
    }
glPushMatrix();
    glTranslatef(m_xpos, m_ypos-m_benbend*2, m_zpos); //Move to Units position
    glRotatef(m_ybodyhed-90,0,1,0);  //Rotate Y-axis
    glRotatef((90-m_zhed)*2,1,0,0);  //Rotate X-axis
    if (m_weaponSwapProg>0)
    {
        glRotatef(-90*m_weaponSwapProg,1,0,0);
        glTranslatef(0,-m_weaponSwapProg*0.5,0);
    }
    glTranslatef(0,-1,-0.8);
    glScalef(0.3+0.2*m_size,0.3+0.2*m_size,0.3+0.2*m_size);
glPushMatrix();

    glDisable(GL_CULL_FACE);

    if (m_inTransportType!=0)
    {
        switch (m_inTransportType)
        {
            case 3:{//Tank

                   }break;
        }
    }
    else switch (m_currWeapon)
    {
        case 0: //Melee
                switch (m_inHands)
                {
                    case 0:{//Empty Hands
                            if (m_interactionProg>0)
                            {
                                glVertexPointer(3, GL_FLOAT, 0, arm);
                                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                                glTranslatef(0.7,1.6,0.9);
                                glPushMatrix();
                                    glTranslatef(0,0,-m_interactionProg);
                                    glScalef(1,1,0.6);
                                    glDrawArrays(GL_QUADS, 0, 24);
                                glPopMatrix();
                                glTranslatef(-1.7,0,0);
                                glRotatef(-80*m_arm2,1,0,0);
                                glScalef(1,1,0.6);
                                glDrawArrays(GL_QUADS, 0, 24);
                                glDisableClientState(GL_COLOR_ARRAY);
                            }
                            else
                            {
                                glVertexPointer(3, GL_FLOAT, 0, arm);
                                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                                glTranslatef(0.7,1.6,0.9);
                                glPushMatrix();
                                if (m_meleeAttackProg==0) glRotatef(-80*m_arm1,1,0,0);
                                else
                                {
                                    glRotatef(60,1,0,0);
                                    glRotatef(-80*(m_meleeAttackProg),1,0,0);
                                    glRotatef(40*(m_meleeAttackProg),0,1,0);
                                }
                                glScalef(1,1,0.6);
                                glDrawArrays(GL_QUADS, 0, 24);
                                glPopMatrix();
                                glTranslatef(-1.7,0,0);
                                glRotatef(-80*m_arm2,1,0,0);
                                glScalef(1,1,0.6);
                                glDrawArrays(GL_QUADS, 0, 24);
                                glDisableClientState(GL_COLOR_ARRAY);
                            }
                           }break;
                    case 1:{//Buildbox
                            glTranslatef(0.7,1.6,0.9);
                            glVertexPointer(3, GL_FLOAT, 0, arm);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(-1.7,0,0);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(0.32,-1.1,-2.3);
                            glDisableClientState(GL_COLOR_ARRAY);
                            glVertexPointer(3, GL_FLOAT, 0, block);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_block);
                            //glColorPointer(3, GL_FLOAT, 0, color_block);
                            glScalef(1.35,1.35,1.35);
                            glDrawArrays(GL_QUADS, 0, 24);
                           }break;
                    case 2:{//Buildblock
                            glTranslatef(0.7,1.6,0.9);
                            glVertexPointer(3, GL_FLOAT, 0, arm);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(-1.7,0,0);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(0.32,-1.1,-2.3);
                            glDisableClientState(GL_COLOR_ARRAY);
                            glVertexPointer(3, GL_FLOAT, 0, block);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_block);
                            //glColorPointer(3, GL_FLOAT, 0, color_block);
                            glScalef(1.35,1.35,1.35);
                            glDrawArrays(GL_QUADS, 0, 24);
                           }break;
                    case 4:{//Wall
                            glTranslatef(0.7,1.6,0.9);
                            glVertexPointer(3, GL_FLOAT, 0, arm);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(-1.7,0,0);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(0.32,-1.1,-2.3);
                            glDisableClientState(GL_COLOR_ARRAY);
                            glVertexPointer(3, GL_FLOAT, 0, block);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_block);
                            //glColorPointer(3, GL_FLOAT, 0, color_block);
                            glScalef(1.35,1.35,1.35);
                            glDrawArrays(GL_QUADS, 0, 24);
                           }break;
                    case 5:{//Terrain
                            glTranslatef(0.7,1.6,0.9);
                            glVertexPointer(3, GL_FLOAT, 0, arm);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(-1.7,0,0);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(0.32,-1.1,-2.3);
                            glDisableClientState(GL_COLOR_ARRAY);
                            glVertexPointer(3, GL_FLOAT, 0, block);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_block);
                            //glColorPointer(3, GL_FLOAT, 0, color_block);
                            glScalef(1.35,1.35,1.35);
                            glDrawArrays(GL_QUADS, 0, 24);
                           }break;
                    case 6:{//Mine
                            glTranslatef(0.7,1.6,0.9);
                            glVertexPointer(3, GL_FLOAT, 0, arm);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(-1.7,0,0);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(0.32,-1.1,-2.3);
                            glDisableClientState(GL_COLOR_ARRAY);
                            glVertexPointer(3, GL_FLOAT, 0, block);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_block);
                            //glColorPointer(3, GL_FLOAT, 0, color_block);
                            glScalef(1.35,1.35,1.35);
                            glDrawArrays(GL_QUADS, 0, 24);
                           }break;
                    case 7:{//Turret
                            glTranslatef(0.7,1.6,0.9);
                            glVertexPointer(3, GL_FLOAT, 0, arm);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(-1.7,0,0);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(0.32,-1.1,-2.3);
                            glDisableClientState(GL_COLOR_ARRAY);
                            glVertexPointer(3, GL_FLOAT, 0, block);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_block);
                            //glColorPointer(3, GL_FLOAT, 0, color_block);
                            glScalef(1.35,1.35,1.35);
                            glDrawArrays(GL_QUADS, 0, 24);
                           }break;
                    case 8:{//Outpost
                            glTranslatef(0.7,1.6,0.9);
                            glVertexPointer(3, GL_FLOAT, 0, arm);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(-1.7,0,0);
                            glDrawArrays(GL_QUADS, 0, 24);
                            glTranslatef(0.32,-1.1,-2.3);
                            glDisableClientState(GL_COLOR_ARRAY);
                            glVertexPointer(3, GL_FLOAT, 0, block);
                            glTexCoordPointer(2, GL_FLOAT, 0, tex_block);
                            //glColorPointer(3, GL_FLOAT, 0, color_block);
                            glScalef(1.35,1.35,1.35);
                            glDrawArrays(GL_QUADS, 0, 24);
                           }break;
                }
                break;
        case 1: //Revolver
                glTranslatef(0.8,1.5,0.5+(m_rifleAttackProg));
                glVertexPointer(3, GL_FLOAT, 0, arm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                glDrawArrays(GL_QUADS, 0, 24);
                glDisableClientState(GL_COLOR_ARRAY);
                glVertexPointer(3, GL_FLOAT, 0, rightArm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_rightArm);
                //glColorPointer(3, GL_FLOAT, 0, color_rightArm);
                glDrawArrays(GL_QUADS, 0, 16);
                break;
        case 2: //Uzi
                glTranslatef(0.8,1.5,0.5+m_rifleAttackProg);
                glVertexPointer(3, GL_FLOAT, 0, arm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                glDrawArrays(GL_QUADS, 0, 24);
                glTranslatef(-2,0,0);
                glDrawArrays(GL_QUADS, 0, 24);
                glTranslatef(2,0,0);
                glDisableClientState(GL_COLOR_ARRAY);
                glVertexPointer(3, GL_FLOAT, 0, rightArm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_rightArm);
                //glColorPointer(3, GL_FLOAT, 0, color_rightArm);
                glDrawArrays(GL_QUADS, 0, 36);
                glTranslatef(-2,0,0);
                glDrawArrays(GL_QUADS, 0, 36);
                break;
        case 3: //Sniper
                glTranslatef(0.8,1.5,0.5+m_rifleAttackProg*1.5);
                glVertexPointer(3, GL_FLOAT, 0, arm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                glDrawArrays(GL_QUADS, 0, 24);
                glDisableClientState(GL_COLOR_ARRAY);
                glVertexPointer(3, GL_FLOAT, 0, rightArm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_rightArm);
                glColorPointer(3, GL_FLOAT, 0, color_rightArm);
                glDrawArrays(GL_QUADS, 0, 60);
                break;
        case 4: //RocketLauncher
                glTranslatef(-0.5,3.7,1.6+m_rifleAttackProg*1.5);
                glVertexPointer(3, GL_FLOAT, 0, dubbleArm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_dubbleArm);
                glDrawArrays(GL_QUADS, 0, 16);
                glDisableClientState(GL_COLOR_ARRAY);
                glVertexPointer(3, GL_FLOAT, 0, cannon);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_cannon);
                //glColorPointer(3, GL_FLOAT, 0, color_cannon);
                glDrawArrays(GL_QUADS, 0, 40);
                break;
        case 5: //Radar
                glTranslatef(0.8,1.5,0.5);
                glVertexPointer(3, GL_FLOAT, 0, arm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                glDrawArrays(GL_QUADS, 0, 24);
                glTranslatef(-2,0,0);
                glDrawArrays(GL_QUADS, 0, 24);
                glDisableClientState(GL_COLOR_ARRAY);
                glVertexPointer(3, GL_FLOAT, 0, radar);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_radar);
                //glColorPointer(3, GL_FLOAT, 0, color_radar);
                glTranslatef(1.95,-0.5,-1.6);
                glScalef(0.8,0.8,0.8);
                glRotatef(-30,1,0,0);
                glDrawArrays(GL_QUADS, 0, 36);
                {
                    int temp=0;
                    if (seeUnit && seeSpawner) temp=3;
                    if (seeUnit && !seeSpawner) temp=2;
                    if (!seeUnit && seeSpawner) temp=1;
                    drawRadar(temp);
                }
                break;
      /*  case 6: //Mine
                glTranslatef(0.7,1.6-m_rifleAttackProg,1.2);
                glVertexPointer(3, GL_FLOAT, 0, arm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                glDrawArrays(GL_QUADS, 0, 24);
                glTranslatef(-1.7,0,0);
                glDrawArrays(GL_QUADS, 0, 24);
                glTranslatef(0.3,-1.2,-2.0);
                glDisableClientState(GL_COLOR_ARRAY);
                glVertexPointer(3, GL_FLOAT, 0, block);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_block_mine);
                //glColorPointer(3, GL_FLOAT, 0, color_block_mine);
                glRotatef(10,1,0,0);
                glScalef(1.4,1.35,0.3);
                glDrawArrays(GL_QUADS, 0, 24);
                break;
        case 7: //Turret
                glTranslatef(0.7,1.6-m_rifleAttackProg,1.2+m_rifleAttackProg*2);
                glVertexPointer(3, GL_FLOAT, 0, arm);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_arm);
                glRotatef(20,0,1,0);
                glDrawArrays(GL_QUADS, 0, 24);
                glRotatef(-30,0,1,0);
                glTranslatef(-1.7,0,0);
                glDrawArrays(GL_QUADS, 0, 24);
                glDisableClientState(GL_COLOR_ARRAY);
                glTranslatef(0.4,-0.8,-1.5);
                glVertexPointer(3, GL_FLOAT, 0, stand);
                glTexCoordPointer(2, GL_FLOAT, 0, tex_stand);
                //glColorPointer(3, GL_FLOAT, 0, color_stand);
                glRotatef(20,0,0,1);
                glScalef(1.1,1.3,1.1);
                glDrawArrays(GL_QUADS, 0, 24);
                break;   */
    }
glEnable(GL_CULL_FACE);
glPopMatrix();
glPopMatrix();
    glDisableClientState(GL_VERTEX_ARRAY);
    glDisableClientState(GL_COLOR_ARRAY);
    glDisableClientState(GL_TEXTURE_COORD_ARRAY);
    glDisable(GL_TEXTURE_2D);

}

void unit::getData(float playerData[])
{
     m_xpos=playerData[0];
     m_ypos=playerData[1];
     m_zpos=playerData[2];
     m_yheadhed=playerData[3];
     m_zhed=playerData[4];
     m_transportFloat=playerData[5];
     m_playerID=(int)playerData[7];
     m_moving=(bool)playerData[6];
     m_online=(bool)playerData[8];
     m_avgvel=playerData[9];
     m_jumpState=(int)playerData[10];
}

bool unit::unitCollision(float x,float y,float z)
{
    float xhitbox=1;
    float yhitbox=2;
    float zhitbox=1;
    if (x>m_xpos-xhitbox+0.0 &&  x<m_xpos+xhitbox+0.0 &&
        y>m_ypos-yhitbox+0.0 &&  y<m_ypos+yhitbox+0.0 &&
        z>m_zpos-zhitbox+0.0 &&  z<m_zpos+zhitbox+0.0) return true;
    return false;
}

void unit::drawRadar(int id)
{
    float square[]={-1.8,0.8,0.1,  -1.8,0.2,0.1,  -1.2,0.2,0.1,  -1.2,0.8,0.1};
    float tex_square_spawner[]={0.504,0.645,  0.504,0.578,  0.586,0.578,  0.586,0.645};
    float tex_square_player[]={0.586,0.645,  0.586,0.578,  0.664,0.578,  0.664,0.645};
    glEnableClientState(GL_COLOR_ARRAY);
    if (id==0) //Nothing
    {
        float color_square_off[]={0.4,0.5,0.4, 0.3,0.3,0.3, 0.3,0.3,0.4, 0.4,0.4,0.4};
        glVertexPointer(3, GL_FLOAT, 0, square);
        glColorPointer(3, GL_FLOAT, 0, color_square_off);
        glTexCoordPointer(2, GL_FLOAT, 0, tex_square_spawner);
        glDrawArrays(GL_QUADS, 0, 4);
        glTranslatef(1,0,0);
        glTexCoordPointer(2, GL_FLOAT, 0, tex_square_player);
        glDrawArrays(GL_QUADS, 0, 4);
    }
    if (id==1) //Spawner
    {
        float color_square_off[]={0.4,0.5,0.4, 0.3,0.3,0.3, 0.3,0.3,0.4, 0.4,0.4,0.4};
        float color_square_on[]={0.9,0.9,0.2, 0.6,0.6,0.1, 0.7,0.6,0.0, 0.9,0.9,0.3};
        glVertexPointer(3, GL_FLOAT, 0, square);
        glColorPointer(3, GL_FLOAT, 0, color_square_on);
        glTexCoordPointer(2, GL_FLOAT, 0, tex_square_spawner);
        glDrawArrays(GL_QUADS, 0, 4);
        glTranslatef(1,0,0);
        glColorPointer(3, GL_FLOAT, 0, color_square_off);
        glTexCoordPointer(2, GL_FLOAT, 0, tex_square_player);
        glDrawArrays(GL_QUADS, 0, 4);
    }
    if (id==2) //Player
    {
        float color_square_off[]={0.4,0.5,0.4, 0.3,0.3,0.3, 0.3,0.3,0.4, 0.4,0.4,0.4};
        float color_square_on[]={0.9,0.9,0.2, 0.6,0.6,0.1, 0.7,0.6,0.0, 0.9,0.9,0.3};
        glVertexPointer(3, GL_FLOAT, 0, square);
        glColorPointer(3, GL_FLOAT, 0, color_square_off);
        glTexCoordPointer(2, GL_FLOAT, 0, tex_square_spawner);
        glDrawArrays(GL_QUADS, 0, 4);
        glTranslatef(1,0,0);
        glColorPointer(3, GL_FLOAT, 0, color_square_on);
        glTexCoordPointer(2, GL_FLOAT, 0, tex_square_player);
        glDrawArrays(GL_QUADS, 0, 4);
    }
    if (id==3) //Spawner and Player
    {
        float color_square_on[]={0.9,0.9,0.2, 0.6,0.6,0.1, 0.7,0.6,0.0, 0.9,0.9,0.3};
        glVertexPointer(3, GL_FLOAT, 0, square);
        glColorPointer(3, GL_FLOAT, 0, color_square_on);
        glTexCoordPointer(2, GL_FLOAT, 0, tex_square_spawner);
        glDrawArrays(GL_QUADS, 0, 4);
        glTranslatef(1,0,0);
        glTexCoordPointer(2, GL_FLOAT, 0, tex_square_player);
        glDrawArrays(GL_QUADS, 0, 4);
    }
    glDisableClientState(GL_COLOR_ARRAY);
/*    //Draw Spawner Symbol
    glTranslatef(-2.7,0.3,0.15);
    glColor4f(0.1,0.1,0.1,1);
    glBegin(GL_LINE_STRIP);
    glVertex4f(0,0,0,1);
    glVertex4f(0.2,0.3,0,1);
    glVertex4f(0.4,0,0,1);
    glEnd();
    //Draw Player Symbol
    glTranslatef(1,0,0);
    glBegin(GL_LINE_STRIP);
    //Legs
    glVertex4f(0.05,0.0,0.0,1);
    glVertex4f(0.15,0.04,0.0,1);
    glVertex4f(0.2,0.1,0.0,1);
    glVertex4f(0.35,0.08,0.0,1);
    glVertex4f(0.3,0.0,0.0,1);
    glEnd();
    //Arms
    glBegin(GL_LINE_STRIP);
    glVertex4f(0.05,0.15,0.0,1);
    glVertex4f(0.09,0.19,0.0,1);
    glVertex4f(0.2,0.2,0.0,1);
    glVertex4f(0.3,0.18,0.0,1);
    glVertex4f(0.4,0.2,0.0,1);
    glEnd();
    //Head
    glBegin(GL_LINE_STRIP);
    glVertex4f(0.2,0.1,0.0,1);
    glVertex4f(0.2,0.25,0.0,1);
    glVertex4f(0.1,0.25,0.0,1);
    glVertex4f(0.1,0.35,0.0,1);
    glVertex4f(0.3,0.35,0.0,1);
    glVertex4f(0.3,0.25,0.0,1);
    glVertex4f(0.2,0.25,0.0,1);
    glEnd();*/
}

void unit::getTextureID(int textureID)
{

}
